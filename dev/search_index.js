var documenterSearchIndex = {"docs":
[{"location":"nodes/det_hydropower/reservoir/#nodes-det_hydro_power-reservoir","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"","category":"section"},{"location":"nodes/det_hydropower/reservoir/#nodes-det_hydro_power-reservoir-fields","page":"Hydro reservoir node","title":"Introduced type and its field","text":"","category":"section"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"The HydroReservoir nodes represents a water storage in a hydropower system. In its simplest form, the HydroGenerator and HydroPump can convert potential energy between HydroReservoir nodes at different head levels to electricity, under the assumption that the reservoirs have constant head levels. In these cases, the HydroReservoir node does not require a description of the relation between volume level and head level. For more detailed modelling, this relation is required to account for the increased power output when the head level difference between reservoirs increase. Head-dependencies are currently not implemented.","category":"page"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"warning: Spillage\nThe HydroReservoir nodes do not include a spillage variable. To avoid infeasible solutions, all reservoir nodes should be connected to a HydroGate node representing a water way for spillage in case of full reservoirs.","category":"page"},{"location":"nodes/det_hydropower/reservoir/#nodes-det_hydro_power-reservoir-fields-stand","page":"Hydro reservoir node","title":"Standard fields","text":"","category":"section"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"The HydroReservoir nodes builds on the RefStorage node type. The tandard fields are given as:","category":"page"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"id:\nThe field id is only used for providing a name to the node. This is similar to the approach utilized in EnergyModelsBase.\nvol::EMB.UnionCapacity:\nThe installed volume corresponds to the total water volume storage capacity of the reservoir. It is equivalent to the field level in a RefStorage node.\ntip: Change of name\nThe storage field level is renamed as a hydro reservoir is described by both the level (the height of the water column in the reservoir) and the storage volume (the volume of water stored). This results in consistency in terminology with existing hydro power models.\nstor_res::ResourceCarrier:\nThe resource that is stored in the reservoir. This must be the reserource representing water. The resource must consistent for all components in the watercourse.\ndata::Vector{Data}:\nAn entry for providing additional data to the model.\nnote: Additional constraints\nThe data field can be used to add minimum, maximum, and schedule constraints on the storage volume using the general constraints types.","category":"page"},{"location":"nodes/det_hydropower/reservoir/#nodes-det_hydro_power-reservoir-fields-new","page":"Hydro reservoir node","title":"Additional fields","text":"","category":"section"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"HydroReservoir nodes add a single additional field compared to a RefStorage, and does not include the charge field since charge/discharge capacity is given through the HydroGenerator, HydroPump, and HydroGate:","category":"page"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"vol_inflow::TimeProfile:\nThe water inflow rate to the reservoir. The inflow is representing the potential water flowing into the reservoir in each operational period. It is depending on rivers flowing into the reservoir or rainfall. It can be provided as OperationalProfile.","category":"page"},{"location":"nodes/det_hydropower/reservoir/#nodes-det_hydro_power-reservoir-math","page":"Hydro reservoir node","title":"Mathematical description","text":"","category":"section"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"The mathematical description is similar to the RefStorage nodes except that the inflow is added to the storage balance.","category":"page"},{"location":"nodes/det_hydropower/reservoir/#nodes-det_hydro_power-reservoir-math-var","page":"Hydro reservoir node","title":"Variables","text":"","category":"section"},{"location":"nodes/det_hydropower/reservoir/#nodes-det_hydro_power-reservoir-math-var-stand","page":"Hydro reservoir node","title":"Standard variables","text":"","category":"section"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"HydroReservoir nodes utilize all standard variables from RefStorage, as described on the page Optimization variables.","category":"page"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"textttopex_var\ntextttopex_fixed\ntextttstor_level\ntextttstor_level_inst\ntextttstor_charge_use\ntextttstor_discharge_use\ntextttflow_in\ntextttflow_out\ntextttstor_level_Δ_op\ntextttstor_level_Δ_rp if the TimeStruct includes RepresentativePeriods","category":"page"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"It will however not use the vaeriables textttstor_charge_inst and textttstor_discharge_inst as the charge and discharge capacities are handled by the connected HydroGenerator, HydroPump, and HydroGate.","category":"page"},{"location":"nodes/det_hydropower/reservoir/#nodes-det_hydro_power-reservoir-math-add","page":"Hydro reservoir node","title":"Additional variables","text":"","category":"section"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"HydroReservoir nodes add additional variables if required by the additional constraints:","category":"page"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"textttrsv_vol_penalty_upn t: Variable for penalizing violation of the volume constraint in direction up in HydroReservoir node n in operational period t with a typical unit of Mm^3.\nUp implies in this case that the reservoir volume is larger than planned.\ntextttrsv_vol_penalty_downn t: Variable for penalizing violation of the volume constraint in direction down in HydroReservoir node n in operational period t with a typical unit of Mm^3.\nDown implies in this case that the reservoir volume is smaller than planned.","category":"page"},{"location":"nodes/det_hydropower/reservoir/#nodes-det_hydro_power-reservoir-math-con","page":"Hydro reservoir node","title":"Constraints","text":"","category":"section"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"The following sections omit the direct inclusion of the vector of HydroReservoir nodes. Instead, it is implicitly assumed that the constraints are valid forall n  N for all HydroReservoir types if not stated differently. In addition, all constraints are valid forall t in T (that is in all operational periods) or forall t_inv in T^Inv (that is in all strategic periods).","category":"page"},{"location":"nodes/det_hydropower/reservoir/#nodes-det_hydro_power-reservoir-math-con-stand","page":"Hydro reservoir node","title":"Standard constraints","text":"","category":"section"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"HydroReservoir nodes utilize in general the standard constraints described in Constraint functions for Storage nodes. The majority of these constraints are hence ommitted in the following description. Specifically, the level constraints are created using the same functions.","category":"page"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"The function constraints_opex_var requires a new method as we have to include the penalty variables for violating the constraints if required:","category":"page"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"beginaligned\n  textttopex_varn t_inv = \n    sum_t in t_inv Big(  opex_var(level(n) t) times textttstor_leveln t +  \n    opex_var(charge(n) t) times textttstor_charge_usen t +  \n    opex_var(discharge(n) t) times textttstor_discharge_usen t  \n    penalty(c_up t) times textttrsv_vol_penalty_upn t+  \n    penalty(c_down t) times textttrsv_vol_penalty_downn t Big) times scale_op_sp(t_inv t)\nendaligned","category":"page"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"where penalty() returns the penalty value for violation of constraints with penalty variables in the upward and downward direction, denoted by c_up and  c_down.","category":"page"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"tip: The function `scale_op_sp`\nThe function scale_op_sp(t_inv t) calculates the scaling factor between operational and strategic periods. It also takes into account potential operational scenarios and their probability as well as representative periods.","category":"page"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"The energy balance in constraints_level_aux is altered to include the inflow to the reservoir:","category":"page"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"beginaligned\n  textttstor_level_Δ_opn t =  \n  vol_inflow(n t) + textttstor_charge_usen t - textttstor_discharge_usen t\nendaligned","category":"page"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"The new method adds furthermore additional constraints, if the corresponding types are provided in the Data field. Soft constraints, i.e., constraints with a penalty, are used if the constraints have non-infinite penalty values. The mathematical formulation of the constraints are:","category":"page"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"Minumum constraints for the reservoir level:\nbeginaligned\n   textttstor_leveln t geq  capacity(level(n) t) times value(c t) qquad  forall c in C^min \n   textttstor_leveln t +  textttrsv_vol_penalty_upn t geq  \n   capacity(level(n) t) * value(c t) qquad  forall c in C^min\nendaligned\nMaximum constraints for the reservoir level:\nbeginaligned\n textttstor_leveln t leq  capacity(level(n) t) times value(c t) qquad  forall c in C^max \n textttstor_leveln t -  textttrsv_vol_penalty_downn t leq  \n capacity(level(n) t) times value(c t) qquad  forall c in C^max\nendaligned\nScheduling constraints for the reservoir level:\nbeginaligned\n textttstor_leveln t =  capacity(level(n) t) times value(c t) quad  forall c in C^sch \n textttstor_leveln t +  textttrsv_vol_penalty_upn t - textttrsv_vol_penalty_downn t =  \n capacity(level(n) t) times value(c t) quad  forall c in C^sch \nendaligned","category":"page"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"where value(ct) returns the relative limit of constraint c and  capacity(nt) returns the installed capacity of node n. The sets C^min,C^max and C^sch contain additional minimum, maximum, and scheduling constraints, repectively.","category":"page"},{"location":"nodes/det_hydropower/reservoir/#nodes-det_hydro_power-reservoir-math-con-add","page":"Hydro reservoir node","title":"Additional constraints","text":"","category":"section"},{"location":"nodes/det_hydropower/reservoir/","page":"Hydro reservoir node","title":"Hydro reservoir node","text":"The HydroReservoir nodes do not include any additional constraints other than through dispatching on Constraint functions for Storage nodes as described above.","category":"page"},{"location":"how-to/contribute/#how_to-con","page":"Contribute to EnergyModelsRenewableProducers","title":"Contribute to EnergyModelsRenewableProducers","text":"","category":"section"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsRenewableProducers","title":"Contribute to EnergyModelsRenewableProducers","text":"Contributing to EnergyModelsRenewableProducers can be achieved in several different ways.","category":"page"},{"location":"how-to/contribute/#how_to-con-bug_rep","page":"Contribute to EnergyModelsRenewableProducers","title":"File a bug report","text":"","category":"section"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsRenewableProducers","title":"Contribute to EnergyModelsRenewableProducers","text":"Another approach to contributing to EnergyModelsRenewableProducers is through filing a bug report as an issue when unexpected behaviour is occuring.","category":"page"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsRenewableProducers","title":"Contribute to EnergyModelsRenewableProducers","text":"When filing a bug report, please follow the following guidelines:","category":"page"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsRenewableProducers","title":"Contribute to EnergyModelsRenewableProducers","text":"Be certain that the bug is a bug and originating in EnergyModelsRenewableProducers:\nIf the problem is within the results of the optimization problem, please check first that the nodes are correctly linked with each other. Frequently, missing links (or wrongly defined links) restrict the transport of energy/mass. If you are certain that all links are set correctly, it is most likely a bug in EnergyModelsRenewableProducers and should be reported.\nIf the problem occurs in model construction, it is most likely a bug in either EnergyModelsBase or EnergyModelsRenewableProducers and should be reported in the respective package. The error message of Julia should provide you with the failing function and whether the failing function is located in EnergyModelsBase or EnergyModelsRenewableProducers. It can occur, that the last shown failing function is within JuMP or MathOptInterface. In this case, it is best to trace the error to the last called EnergyModelsBase or EnergyModelsRenewableProducers function.\nIf the problem is only appearing for specific solvers, it is most likely not a bug in EnergyModelsRenewableProducers, but instead a problem of the solver wrapper for MathOptInterface. In this case, please contact the developers of the corresponding solver wrapper.\nLabel the issue as bug, and\nProvide a minimum working example of a case in which the bug occurs.","category":"page"},{"location":"how-to/contribute/#how_to-con-feat_req","page":"Contribute to EnergyModelsRenewableProducers","title":"Feature requests","text":"","category":"section"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsRenewableProducers","title":"Contribute to EnergyModelsRenewableProducers","text":"EnergyModelsRenewableProducers includes several new nodal descriptions for renewable energy producers. However, there can be a demand for additional requirements for the existing nodes or for new descriptions which fall below the umbrella of renewable energy producers. In this case, you can contribute through a feature request.","category":"page"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsRenewableProducers","title":"Contribute to EnergyModelsRenewableProducers","text":"Feature requests for EnergyModelsRenewableProducers should follow the guidelines developed for EnergyModelsBase.","category":"page"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsRenewableProducers","title":"Contribute to EnergyModelsRenewableProducers","text":"note: Note\nEnergyModelsRenewableProducers is slightly different than EnergyModelsBase.Contrary to the other package, we consider that it is beneficial to have all potential features of renewable energy production within EnergyModelsRenewableProducers. Hence, if you have a requirement for a new nodal description, do not hesitate to create an issue.","category":"page"},{"location":"nodes/battery/#nodes-battery","page":"Battery","title":"Hydro storage node","text":"","category":"section"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"As outlined in the section on simple hydro storage, the reference storage nodeRefStorage has some built in limitations. In the case of battery storage, the main limitations are related to not limiting the discharge use, not being able to include charge and discharge efficiencies, and not allowing for degradation of the storage capacity.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"Hence, it is necessary to include specific battery nodes.","category":"page"},{"location":"nodes/battery/#nodes-battery-phil","page":"Battery","title":"Concepts used for Batteries","text":"","category":"section"},{"location":"nodes/battery/#nodes-battery-phil-life","page":"Battery","title":"Battery lifetime","text":"","category":"section"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"Batteries experience storage capacity degradation. The degradation can be differentiated in 1. degradation through time and 2. degradation through charging and discharging the battery. Degradation through time is not included in the developed nodes. Instead, degradation through charging is included.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The lifetime is implemented through AbstractBatteryLife types. There are two options implemented, InfLife and CycleLife. InfLife does not include any storage capacity degradation. The battery life is unlimited and unimpacted by the use of the battery. CycleLife includes both linear battery degradation and a lifetime through the maximum number of cycles of the battery. The linear degradation is dependent on the charging of the battery although this is equivalent to the discharging. The type allows for replacement of the battery stack to reduce battery degradation to 0 at the beginning of an investment period. The cost for replacement has to be accessible through a strategic period. Hence, it can be either a FixedProfile or a StrategicProfile, but cannot include, e.g. OperationalProfile.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"danger: Varying storage capacities with Batteries\nIf you use batteries with varying capacities, it is important to implement one battery node for each investment period. The key reason is that the use is not calculated based on changing capacities. Similarly, if you plan to use batteries in investment models, it is necessary to specify one battery node for each investment periods with limited investments in an investment period.","category":"page"},{"location":"nodes/battery/#nodes-battery-phil-reserve","page":"Battery","title":"Philosophy of ReserveBattery","text":"","category":"section"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"ReserveBattery nodes allow modelling a system that requires reserve capacity. The reserve capacity must be specified as a sink with a demand for a given reserve resource and a potential penalty for violating the demand. The ReserveBattery is subsequently coupled to the link to satisfy the potential demand.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"Reserve resources and demands are not included in the energy balances. Instead, they can be used to specify a minimum amount of dispatchable power to both increase either the electricity generation capacity or the electricity demand.","category":"page"},{"location":"nodes/battery/#nodes-battery-fields","page":"Battery","title":"Introduced types and their fields","text":"","category":"section"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The AbstractBattery abstract type is used to simplify the design of the constraints. It has in its current stage two concrete subtypes, Battery and ReserveBattery. Both types utilize the same main functionality with respect to efficiencies and battery lifes. ReserveBattery is included as a first nodal type to be able to provide a reserve capacity for the energy system. This allows the user to specify a minimum of required reserve capacity at each individual operational period.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The two nodes are designed to work with the cyclic storage behaviors. In practice, battery storages should utilize CyclicRepresentative as battery storage is in general not considered for seasonal energy storage.","category":"page"},{"location":"nodes/battery/#nodes-battery-fields-stand","page":"Battery","title":"Standard fields","text":"","category":"section"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The standard fields are given as:","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"id:\nThe field id is only used for providing a name to the node. This is similar to the approach utilized in EnergyModelsBase.\ncharge::EMB.UnionCapacity:\nThe charge storage parameters must include a capacity. The charge capacity is the capacity before taking into account the charging efficiency from the viewpoint of the storage level. This is also shown in the section on the level constraints More information can be found on storage parameters.\nlevel::EMB.UnionCapacity:\nThe level storage parameters must include a capacity. More information can be found on storage parameters.\ndischarge::EMB.UnionCapacity:\nThe discharge storage parameters must include a capacity. The discharge capacity is the capacity after taking into account the discharging efficiency from the viewpoint of the storage level. This is also shown in the section on the level constraints More information can be found on storage parameters.\nnote: Permitted values for storage parameters in `charge`, `level`, and `discharge`\nIf the node should contain investments through the application of EnergyModelsInvestments, it is important to note that you can only use FixedProfile or StrategicProfile for the capacity, but not RepresentativeProfile or OperationalProfile. Similarly, you can only use FixedProfile or StrategicProfile for the fixed OPEX, but not RepresentativeProfile or OperationalProfile. The variable operating expenses can be provided as OperationalProfile as well. In addition, all capacity and fixed OPEX values have to be non-negative.\nstor_res::ResourceEmit:\nThe stor_res is the stored Resource. In the case of a battery, you must specifiy your electricity resource.\ninput::Dict{<:Resource, <:Real} and output::Dict{<:Resource, <:Real}:\nBoth fields describe the input and output Resources with their corresponding conversion factors as dictionaries. The values correspond to charge and discharge efficiencies from the AbstractBattery nodes.\nAll values have to be in the range 0 1.\ndata::Vector{Data}:\nAn entry for providing additional data to the model. In the current version, it is only relevant for additional investment data when EnergyModelsInvestments is used.","category":"page"},{"location":"nodes/battery/#nodes-battery-fields-new","page":"Battery","title":"Additional fields","text":"","category":"section"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"AbstractBattery nodes add additional fields compared to RefStorage nodes. These fields are located below the field output and before the field data.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The individual fields are related to specifics of batteries. These fields are given as:","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"battery_life::AbstractBatteryLife:\nThe battery life is incorporated to include the potential for either battery type to include battery storage degradation. It is explained in more detail above.\nreserve_up::Vector{<:ResourceCarrier}:\nThe upwards reserve is only included for ReserveBattery nodes. It corresponds to the potential of the node to deliver reserve electricity to the system in the given operational period.\nThe specified resources cannot be part of the input or output dictionaries.\nreserve_down::Vector{<:ResourceCarrier}:\nThe downwards reserve is only included for ReserveBattery nodes. It corresponds to the potential of the node to receive reserve electricity from the system in the given operational period.\nThe specified resources cannot be part of the input or output dictionaries.","category":"page"},{"location":"nodes/battery/#nodes-battery-math","page":"Battery","title":"Mathematical description","text":"","category":"section"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"In the following mathematical equations, we use the name for variables and functions used in the model. Variables are in general represented as","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"textttvar_exampleindex_1 index_2","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"with square brackets, while functions are represented as","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"func_example(index_1 index_2)","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"with paranthesis.","category":"page"},{"location":"nodes/battery/#nodes-battery-math-var","page":"Battery","title":"Variables","text":"","category":"section"},{"location":"nodes/battery/#nodes-battery-math-var-stand","page":"Battery","title":"Standard variables","text":"","category":"section"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The battery node types utilize all standard variables from RefStorage, as described on the page Optimization variables. The variables include:","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"textttopex_var\ntextttopex_fixed\ntextttstor_level\ntextttstor_level_inst\ntextttstor_charge_use\ntextttstor_charge_inst\ntextttstor_discharge_use\ntextttstor_discharge_inst\ntextttflow_in\ntextttflow_out\ntextttstor_level_Δ_op\ntextttstor_level_Δ_rp if the TimeStruct includes RepresentativePeriods","category":"page"},{"location":"nodes/battery/#nodes-battery-math-add","page":"Battery","title":"Additional variables","text":"","category":"section"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"AbstractBattery nodes by default calculate the charging of a battery in the individual periods, even if the battery life is modelled as InfLife Hence, the following additional variables are included through providing a new methods to EnergyModelsBase.variables_node():","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"textttbat_prev_usen t: Previous charging of battery n at the beginning of operational period t with a typical unit of MWh.\nThe previous use corresponds to how much the battery is charged up to the current operational period. It is utilized for calculating the degradation of the battery.\ntextttbat_prev_use_spn t_inv: Previous charging of battery n at the beginning of investmet period t_inv with a typical unit of MWh.\nThe previous use corresponds to how much the battery is charged up to the current investment period. It is utilized for calculating the degradation of the battery.\ntextttbat_use_spn t_inv: Charging of battery n in investment period t_inv with a typical unit of MWh.\nThe use allows to see how many charging cycles are conducted within an investment period. It is utilized for calculating the degradation of the battery.\ntextttbat_use_rpn t_rp: Charging of battery n in representantive period t_rp with a typical unit of MWh.\nThe use allows to see how many charging cycles are conducted within a representative period. It is utilized for calculating the degradation of the battery.\nIt is only created if the time structure includes representative periods.\ntextttbat_stack_replace_bn t_inv: Binary variable representing replacement of the battery stack.\nThe battery stack replacement is occuring at the beginning of an investment period and results in setting the previous use to 0. Consequently, the initial capacity is available again.\nIt is only created for battery nodes with CycleLife.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"ReserveBattery nodes create two additional variables:","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"textttbat_res_upn t: Available upwards reserve of battery n in operational period t with a typical unit of MW.\nThe upwards reserve corresponds to the potential of the battery to provide additional capacity to the system. The capacity is required to be sufficient for a duration of 1 of an operational period as outlined in Utilize TimeStruct.\ntextttbat_res_downn t: Available downwards reserve of battery n in operational period t with a typical unit of MW.\nThe downwards reserve corresponds to the potential of the battery to use surplus capacity in the system for charging the battery. The capacity is required to be sufficient for a duration of 1 of an operational period as outlined in Utilize TimeStruct.","category":"page"},{"location":"nodes/battery/#nodes-battery-math-con","page":"Battery","title":"Constraints","text":"","category":"section"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The following sections omit the direct inclusion of the vector of battery storage nodes. Instead, it is implicitly assumed that the constraints are valid forall n  N for all Battery or ReserveBattery types if not stated differently. In addition, all constraints are valid forall t in T (that is in all operational periods) or forall t_inv in T^Inv (that is in all investment periods).","category":"page"},{"location":"nodes/battery/#nodes-battery-math-con-stand","page":"Battery","title":"Standard constraints","text":"","category":"section"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"Battery storages nodes utilize in general the standard constraints described on Constraint functions for RefStorage nodes.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"These standard constraints are:","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"constraints_capacity_installed:\nbeginaligned\ntextttstor_level_instn t  = capacity(level(n) t) \ntextttstor_charge_instn t  = capacity(charge(n) t) \ntextttstor_discharge_instn t  = capacity(charge(n) t)\nendaligned\ntip: Using investments\nThe function constraints_capacity_installed is also used in EnergyModelsInvestments to incorporate the potential for investment. Nodes with investments are then no longer constrained by the parameter capacity.\nconstraints_flow_in:\nThe auxiliary resource constraints are independent of the chosen storage behavior:\ntextttflow_inn t p = inputs(n p) times textttflow_inn stor_res(n)\nqquad forall p in inputs(n) setminus stor_res(n)\nThe stored resource constraints are depending on the chosen storage behavior. it is given by\ntextttflow_inn t stor_res(n) = textttstor_charge_usen t\nconstraints_level: The level constraints are in general following the default approach with minor modifications. They are explained in detail below in Level constraints\nconstraints_opex_var:\nbeginaligned\ntextttopex_varn t_inv =  sum_t in t_inv\n  opex_var(level(n) t) times textttstor_leveln t times scale_op_sp(t_inv t) +  \n  opex_var(charge(n) t) times textttstor_charge_usen t times scale_op_sp(t_inv t) +  \n  opex_var(discharge(n) t) times textttstor_discharge_usen t times scale_op_sp(t_inv t)\nendaligned\ntip: The function `scale_op_sp`\nThe function scale_op_sp(t_inv t) calculates the scaling factor between operational and investment periods. It also takes into account potential operational scenarios and their probability as well as representative periods.\nconstraints_data:\nThis function is only called for specified data of the CO₂ storage node, see above.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"info: Implementation of OPEX\nThe fixed and variable OPEX constribubtion for the charge, the level, and the discharge capacities are only included if the corresponding storage parameters have a field opex_fixed and opex_var, respectively. Otherwise, they are omitted.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"Batteries require a new method for constraints_capacity. While the charge and discharge capacities are unaffected by the storage level degradation,","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"beginaligned\ntextttstor_charge_instn t  geq textttstor_charge_usen t \ntextttstor_discharge_instn t  geq textttstor_discharge_usen t \nendaligned","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"is is impacting the storage level capacity. If the node utilizes InfLife, the function reverts to the default behavior given by","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"textttstor_level_instn t  geq textttstor_leveln t ","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"However, if the node utilizes CycleLife, we have to include battery degradation through","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"beginaligned\ntextttstor_level_instn t -  degradation(n) times textttbat_prev_usen t  cycles(n)  \n  geq textttstor_leveln t\nendaligned","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The degradation corresponds to a linear degradation between a fresh battery with 0 cycles and a worn out battery at the maximum nubmer of cycles. It is implemented through the function capacity_reduction.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The outlet flow of a Battery node is similar to a RefStorage node. It is reusing the functionality of the function constraints_flow_out for Storage nodes given by","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"textttflow_outn t stor_res(n) = textttstor_discharge_usen t","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"ReserveBattery nodes include a new method to also include the outflow of the reserve resources. This outflow does not correspond to a physical flow of energy or mass. Instead, it is purely utilized for accounting purposes.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The provided reserve for the specified reserve resources P^up = reserve_up(n) and P^down = reserve_down(n) is given by","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"beginaligned\ntextttbat_res_upn t  = sum_p in P^up textttflow_outn t p \ntextttbat_res_downn t  sum_p in P^down textttflow_outn t p \nendaligned","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The fixed operating expenditures, calculated through the function constraints_opex_fixed, requires a new method to include the costs for the battery stack replacement. It first creates an auxiliary variable stack_replace which is given as","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"stack_replacet_inv = stor_level_currentn t_inv times bat_stack_replace_bn t_inv","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"if the battery includes investment options or","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"stack_replacet_inv = capacity(level(n) t_inv) times bat_stack_replace_bn t_inv","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"if the battery does not include investments. The bilinearity is reformulated using the function linear_reformulation. This auxiliary variable is subsequently utilized in the calculation of the","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"beginaligned\ntextttopex_fixedn t_inv =  \n  opex_fixed(level(n) t_inv) times textttstor_level_instn first(t_inv) +  \n  opex_fixed(charge(n) t_inv) times textttstor_charge_instn first(t_inv) +  \n  opex_fixed(discharge(n) t_inv) times textttstor_discharge_instn first(t_inv) +  \n  stack_cost(n) times stack_replacet_inv  duration_strat(t_inv)\nendaligned","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"tip: Why do we divide by `duration_strat(t_inv)`\nStack replace occurs always at the beginning of an investment period t_inv and only once in an investment period. The variable textttopex_fixedn t_inv is multiplied in the objective function with duration_strat(t_inv). As a consequence, if the duration of the investment period is larger than 1, we would invest multiple times into a new stack. Consequently, we have to divide the costs by the duration of the investment period.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"tip: Why do we use `first()`\nThe variables textttstor_level_inst are declared over all operational periods (see the section on Capacity variables for further explanations). Hence, we use the function first(t_inv) to retrieve the installed capacities in the first operational period of a given investment period t_inv in the function constraints_opex_fixed.","category":"page"},{"location":"nodes/battery/#nodes-battery-math-con-add","page":"Battery","title":"Additional constraints","text":"","category":"section"},{"location":"nodes/battery/#nodes-battery-math-con-add-use","page":"Battery","title":"Battery use constraints","text":"","category":"section"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The calculation of the previous battery use requires the definition of new constraint functions as the approach differs depending on the chosen TimeStructure. The overall approach is similar to the calculation of the level constraints in EnergyModelsBase. The core function is constraints_usage from which the individual iteration is achieved.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"Within this function, we first calculate forall t_inv in T^Inv the use of a battery within each investment period:","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"beginaligned\ntextttbat_use_spn t_inv = sum_t in t_inv  textttstor_charge_usen t times  \n  inputs(n p_stor) times scale_op_sp(t_inv t) \nendaligned","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"In addition, we calculate the charging of the storage up to the current investment period t_inv through the subfunction constraints_usage_sp. This function has two distinctive methods:","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"If the current investment period is the first, we add the following constraint:\ntextttbat_prev_use_spn t_inv = 0\nIn all other investment periods it is given by\ntextttbat_prev_use_spn t_inv = textttdisjunctt_inv\nin which we introduce an auxiliary variable textttdisjunctt_inv. The meaning of the auxiliary variable is depending on the chosen battery life type. For all AbstractBatteryLife, if not specified differently, it is simply given as:\nbeginaligned\ntextttdisjunctt_inv =  textttbat_prev_use_spn t_inv prev +  \n  textttbat_use_spn t_inv times duration_strat(t_inv prev) \nendaligned\nwe have to include a bilinear term:\nbeginaligned\ntextttdisjunctt_inv =  ( textttbat_prev_use_spn t_inv prev +  \n  textttbat_use_spn t_inv times duration_strat(t_inv prev) ) times  \n  textttbat_stack_replace_nn t_inv \nendaligned\nwhich is reformulated within the function directly. The differentiation is achieved through the subfunction replace_disjunct.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The function subsequently calls the function constraints_usage_iterate which iterates through the time structure and adds relevant constraints.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"If the TimeStructure includes representative periods, then the use in each representative period t_rp is calculated (in the function constraints_usage_iterate):","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"beginaligned\ntextttbat_use_rpn t_rp = sum_t in t_rp  textttstor_charge_usen t times  \n  inputs(n p_stor) times scale_op_sp(t_rp t) \nendaligned","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"Once we reach the lowest time structure, i.e., SimpleTimes, we enforce in the case of CycleLife the upper bound on the number of cycles of the battery for the last operational period t (in the last representative period for each operational scenario, if used) of an investment period as:","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"beginaligned\ncycles(n) times  textttstor_level_instn t geq  \n  textttbat_prev_usen t + textttbat_use_spn t_inv times duration_strat(t_inv prev) \nendaligned","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The declaration of the actual constraint for the previous use utilises the helper variable prev_use in the following constraint:","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"beginaligned\ntextttbat_textttprev_usen t =  \n prev_uset +  \ntextttstor_charge_usen t times  \n  inputs(n p_stor) times duration(t)  \nendaligned","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The individual value of the auxiliary variable prev_use can be differentiated in three individual cases:","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"In the first operational period (in the first representative period) in investment periods:\nThe constraint is given as\nprev_uset = textttbat_prev_use_spn t_inv\nwith t_inv pre  t_inv.\nIn the first operational period in subsequent representative periods:\nThe constraint is given as\nbeginaligned\nprev_uset =  textttbat_prev_usen first(t_rpprev) -  \n  textttstor_charge_usen first(t_rpprev) times  \n  inputs(n p_stor) times duration(first(t_rpprev)) +  \ntextttbat_use_rpn t_rpprev \nendaligned\nwith t_rpprev denoting the previous representative period. The subtraction is necessary as the use is calculated at the end of a period.\nIn all other operational periods\nprev_uset = textttbat_prev_usen t_prev\nwith t_prev denoting the previous operational period.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"Note, that the auxiliary variable is not directly implemented. Instead, the JuMP macro @expression is utilized.","category":"page"},{"location":"nodes/battery/#nodes-battery-math-con-add-reserve","page":"Battery","title":"Reserve constraints","text":"","category":"section"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The reserve requires new constraints for calculating the potential of the ReserveBattery to provide reserve capacity. This is achieved through the function constraints_reserve called from the create_node function.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"A standard AbstractBattery node does not add any constraints when calling the function. A ReserveBattery adds the following additional constraints for specifying the available upwards reserve:","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"beginaligned\ntextttstor_discharge_usen t -  textttstor_charge_usen t leq  \n  textttstor_discharge_instn t - textttbat_res_upn t \ntextttstor_leveln t -  textttbat_res_upn t geq 0 \nendaligned","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"and downwards reserve:","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"beginaligned\ntextttstor_charge_usen t -  textttstor_discharge_usen t leq  \n  textttstor_charge_instn t - textttbat_res_downn t \ntextttstor_leveln t +  textttbat_res_downn t leq  \n  textttstor_level_instn t -  \n    degradation(n) times textttbat_prev_usen t  cycles(n) \nendaligned","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The second constraint is replaced by","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"textttstor_leveln t + textttbat_res_downn t leq textttstor_level_instn t","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"if the node uses InfLife, and hence, does not include battery degradation.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"note: Required time for providing the reserve\nAs can be seens from above constraints, it is necessary to provide the reserve capacity for at least a duration of 1 of an operational period. If you use hourly resolution, it corresponds to an hour, even if the duration of the representative periods is longer (specified through a value differeing from 1 in the time structure). This concept is explained in the section utilize TimeStruct.","category":"page"},{"location":"nodes/battery/#nodes-battery-math-con-add-level","page":"Battery","title":"Level constraints","text":"","category":"section"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The level constraints are in general slightly more complex to understand. The overall structure is outlined on Constraint functions. The level constraints are called through the function constraints_level which then calls additional functions depending on the chosen time structure (whether it includes representative periods and/or operational scenarios) and the chosen storage behaviour.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The battery nodes utilize the majority of the concepts from EnergyModelsBase but require adjustments for both constraining the variable textttstor_level_Δ_op and specifying how the storage node has to behave in the first operational period of an investment period. This is achieved through dispatching on the functions constraints_level_aux.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The constraints introduced in constraints_level_aux are given by the energy balance with p_stor corresponding to the stored resource:","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"beginaligned\n  textttstor_level_Δ_opn t =  \n  textttstor_charge_usen t times inputs(n p_stor) -  \n  textttstor_discharge_usen t  outputs(n p_stor)\nendaligned","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"If the time structure includes representative periods, we also calculate the change of the storage level in each representative period within the function constraints_level_iterate (from EnergyModelsBase):","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"  textttstor_level_Δ_rpn t_rp = sum_t in t_rp\n  textttstor_level_Δ_opn t times scale_op_sp(t_inv t)","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The general level constraint is calculated in the function constraints_level_iterate (from EnergyModelsBase):","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"textttstor_leveln t = prev_level +\ntextttstor_level_Δ_opn t times duration(t)","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"in which the value prev_level is depending on the type of the previous operational (t_prev) and investment period (t_invprev) (as well as the previous representative period (t_rpprev)). It is calculated through the function previous_level.","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"In the case of battery nodes, we can distinguish the following cases:","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"The first operational period in the first representative period in any investment period (given by typeof(t_prev) = typeof(t_rp prev) and typeof(t_invprev) = NothingPeriod). In this situation, we can distinguish three cases, the time structure does not include representative periods:\nprev_level = textttstor_leveln last(t_inv)\nthe time structure includes representative periods and the storage behavior is given as CyclicRepresentative:\nprev_level = textttstor_leveln last(t_rp)\nthe time structure includes representative periods and the storage behavior is given as CyclicStrategic:\nbeginaligned\n prev_level =  textttstor_leveln first(t_rplast) -  \n   textttstor_level_Δ_opn first(t_rplast) times duration(first(t_rplast)) +  \n   textttstor_level_Δ_rpn t_rplast times duration_strat(t_rplast)\nendaligned\nThe first operational period in subsequent representative periods in any investment period (given by typeof(t_prev) = nothing) if the the storage behavior is given as CyclicStrategic:\n\nbeginaligned\n prev_level =  textttstor_leveln first(t_rpprev) -  \n   textttstor_level_Δ_opn first(t_rpprev) times duration(first(t_rpprev)) +  \n   textttstor_level_Δ_rpn t_rpprev\nendaligned\nThis situation only occurs in cases in which the time structure includes representative periods.\nAll other operational periods:\n\n prev_level = textttstor_leveln t_prev","category":"page"},{"location":"nodes/battery/","page":"Battery","title":"Battery","text":"All cases are implemented in EnergyModelsBase simplifying the design of the system.","category":"page"},{"location":"nodes/det_hydropower/description/#nodes-det_hydro_power","page":"Detailed hydropower","title":"Detailed hydropower","text":"","category":"section"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"Cascaded hydropower systems can be modelled using the HydroReservoir, HydroGate, HydroGenerator, and HydroPump nodes. The nodes can be used in combination to model a detailed hydropower system. Unlike HydroStorage, these nodes allow for modelling of water as a resource that can be stored in reservoirs and moved between reservoirs to generate/consume electricity. The defined node types are:","category":"page"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"HydroReservoir can have water as the stored resource. It is explained in more detail on its nodal page.\nHydroGenerator can generate electricity by moving water to a reservoir at a lower altitude or the ocean. It is explained in more detail on its nodal page.\nHydroPump can move water to a reservoir at a higher altitude by consuming electricity. It is explained in more detail on its nodal page.\nHydroGate can discharge to lower reservoirs without producing electricity, for example due to spillage or environmental restrictions in the water course. It is explained in more detail on its nodal page.","category":"page"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"warning: Warning\nThe defined node types have to be used in combination to set up a hydropower system. They should not be used as stand-alone nodes.","category":"page"},{"location":"nodes/det_hydropower/description/#nodes-det_hydro_power-phil","page":"Detailed hydropower","title":"Philosophy of the detailed hydropower nodes","text":"","category":"section"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"The detailed hydropower nodes provide a flexible means to represent the physics of cascaded hydropower systems. By connecting nodes of different  types, unique systems with optional number of reservoirs, generators, pumps and discharge gates can be modelled.","category":"page"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"The HydroReservoir node is a storage node used for storing water, while HydroGenerator, HydroPump and HydroGate nodes move water around in the system. In addition, HydroGenerator and HydroPump nodes convert potential energy to electric energy and vice versa.","category":"page"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"The detailed modelling of hydropower requires two resources to be defined: a water resource and an electricity resource.  HydroReservoir and HydroGate nodes only use the water resource, while HydroGenerator and HydroPump nodes use both resources.","category":"page"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"The nodes should be connected by links to represent the water ways in the system. Links are also used to define flow of electricity in and out of the system through HydroPump and HydroGenerator nodes, respectively.","category":"page"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"danger: Direct linking required\nThe nodes included in the water way should be connected directly and not through an Availability node. An availability node can be used to connect electricity resources, but the water resource must be excluded from the availability node to prevent that the availability node is used to move water to reservoirs with higher altitude without consuming electricity.","category":"page"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"danger: Reservoir input and output required\nAll nodes must have both input and output. Therefore, a RefSource node with capacity 0 should be connected to the reservoir at the top of the water course. Similarly, the water transported through the hydropower system requires a final destination. The ocean, or similar final destination, should be represented as a RefSink with the water resource as input an no surplus penalty. This way, it can accept any amount of water.","category":"page"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"warning: Detailed hydropower nodes and investment models\nThe current implementation of nodes described below does not allow their usage in capacity expansion models. This is checked through the function EMB.check_node_data in the EnergyModelsInvestments extension.","category":"page"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"Some of the node types has similar functionality and use some of the same code. The following, describes some general functionality before a more detailed description of the nodes are provided.","category":"page"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"The illustration below shows a typical hydropower system where the dotted lines illustrate the links between the nodes.","category":"page"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"(Image: Detailed hydropower example topology.)","category":"page"},{"location":"nodes/det_hydropower/description/#nodes-det_hydro_power-phil-pq","page":"Detailed hydropower","title":"Conversion to/from electric energy: the power-discharge relationship","text":"","category":"section"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"The conversion between energy stored in the water resources in the hydropower system and electric energy is described by a power-discharge relationship. The conversion process in the HydroGenerator and HydroPump nodes are reversed processes and modelled using the same implementation.","category":"page"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"The conversion is based on a set of PQ-points that describes the relationship between electric energy (power) and discharge of water, namely how much electric energy that is generated per volume of water discharged per time unit. For a HydroPump node, the PQ-points describes how much electric energy the pump consumes per unit of water that is pumped to a higher reservoir, or how much water that is pumped per unit of electric energy consumed. The PQ-points are provided as input through the pq_curve field of the  HydroGenerator and HydroPump nodes.","category":"page"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"note: Relative `PqPoints`\nThe  PqPoints are relative to the installed capacity. This approach makes if possible to freely chose the capacity of the node (provided in the field cap::TimeProfile) to refer to the electricity resource (power capacity) or the water resource (discharge/pump capacity) of the node, depending on the input used when setting up det hydropower system.","category":"page"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"note: Energy equivalent\nAlternatively, a single value representing the energy equivalent can be provided as input in the field pq_curve. By the use of a constuctor, a PqPoints struct consisting of a minimum and maximum point is then created based on the energy equvalent. If a single energy equivalent is given as input, the installed capacity (provided in the field cap::TimeProfile) must refer to the power capacity of the HydroGenerator or HydroPump nodes.","category":"page"},{"location":"nodes/det_hydropower/description/#nodes-det_hydro_power-phil-con","page":"Detailed hydropower","title":"Additional constraints","text":"","category":"section"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"In addition to the constraints describing the physical system, hydropower systems are subject to a wide range of regulatory constraints or self-imposed constraints. Examples for these constraints are to preserve ecological conditions, facilitate multiple use of water (such as for agriculture or recreation), or ensure safe operation before/during maintanance or in the high season for recreational acitivities in the water courses. Often, such constraints can be translated into a schedule, a minimum, or maximum constraint. A general functionality has been implemented for adding such constraints to HydroReservoir, HydroGate, HydroGenerator, and HydroPump nodes. The constraints are optional through the use of the data::Vector{Data} fields.","category":"page"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"note: ScheduleConstraint scaling\nScheduleConstraint inputs are given as values relative to a node capacity. For example, a constraint value 0.5 represents 50% of the node capacity. This makes the use of constraints in investment models possible where the capacity is not known ahead.","category":"page"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"Minimum constraints (MinSchedule): hard constraints (absolute) or soft constraints (with a penalty for violation) that restricts the minimum of a variable to a given value (e.g., discharge, power, reservoir level)\nMaximum constraints (MaxSchedule): hard constraints (absolute) or soft constraints (with a penalty for violation) that restricts the maximum of a variable to a given value (e.g., discharge, power, reservoir level)\nSchedule constraints (EqualSchedule): hard constraints (absolute) or soft constraints (with a penalty for violation) that restricts a variable to a given value (e.g., discharge, power, reservoir level)","category":"page"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"The minimum, maximum, and schedule constraints are subtypes of the abstract type ScheduleConstraint{T<:AbstractScheduleType}, where new constraints types can be implemeted as subtypes.","category":"page"},{"location":"nodes/det_hydropower/description/#nodes-det_hydro_power-phil-wv","page":"Detailed hydropower","title":"End-value setting of water","text":"","category":"section"},{"location":"nodes/det_hydropower/description/","page":"Detailed hydropower","title":"Detailed hydropower","text":"Scheduling of large reservoirs typically require a method for valuating the future oportunity value of storing water beyond the optimization horizon. This will be included in the EMX receeding horizon package that is under development.","category":"page"},{"location":"nodes/hydropower/#nodes-hydro_power","page":"Simple Hydropower","title":"Hydro storage node","text":"","category":"section"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"The reference storage node, RefStorage is quite flexible with respect to the individual storage behaviours, that is cyclic (both representative and strategic) or accumulating as it is included as parametric type using the individual storage behaviours. In addition, it allows for modelling charge and storage level as different storage parameters. It is, however, not possible at the moment to provide a discharge capacity required in hydropower modelling. Furthermore, it is not possible to include an inflow to the storage node, except through artifically creating a source node representing the water flowing into the node.","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"Hence, it is necessary to include a specific hydropower storage node.","category":"page"},{"location":"nodes/hydropower/#nodes-hydro_power-fields","page":"Simple Hydropower","title":"Introduced types and their fields","text":"","category":"section"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"The HydroStorage abstract type is used to simplify the design of the constraints. It has in its current stage two concrete subtypes, HydroStor and PumpedHydroStor. Both types utilize the same main functionality, although PumpedHydroStor allows for utilizing electricity to store more water. The two nodes are designed to work with the cyclic storage behaviors. HydroStor and PumpedHydroStor should mainly be used for aggregated hydropower descriptions.","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"warning: Input, output, and stored resource\nAlthough hydro reservoir store water, we have to assume in the current implementation that electricity is stored. The key reason for this is that we do not support in the modelling approach a conversion from the variable textttflow_in of a resource to a different stored resource.","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"For detailed hydropower modeling, see Detailed hydropower.","category":"page"},{"location":"nodes/hydropower/#nodes-hydro_power-fields-stand","page":"Simple Hydropower","title":"Standard fields","text":"","category":"section"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"The standard fields are given as:","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"id:\nThe field id is only used for providing a name to the node. This is similar to the approach utilized in EnergyModelsBase.\ncharge::EMB.UnionCapacity:\nThe charge storage parameters must include a capacity. More information can be found on storage parameters.\ninfo: Meaning in boths nodes\nThe charge field is only included for PumpedHydroStor nodes while HydroStor do not allow for flow into the node.\nlevel::EMB.UnionCapacity:\nThe level storage parameters must include a capacity. More information can be found on storage parameters.\ndischarge::EMB.UnionCapacity:\nThe discharge storage parameters must include a capacity. More information can be found on storage parameters.\nnote: Permitted values for storage parameters in `charge`, `level`, and `discharge`\nIf the node should contain investments through the application of EnergyModelsInvestments, it is important to note that you can only use FixedProfile or StrategicProfile for the capacity, but not RepresentativeProfile or OperationalProfile. Similarly, you can only use FixedProfile or StrategicProfile for the fixed OPEX, but not RepresentativeProfile or OperationalProfile. The variable operating expenses can be provided as OperationalProfile as well. In addition, all capacity and fixed OPEX values have to be non-negative.\nstor_res::ResourceEmit:\nThe stor_res is the stored Resource. The current implementation of HydroStorage nodes do not consider the conversion of potential energy of the stored water to electricity. Hence, you must specifiy your electricity resource.\ninput::Dict{<:Resource, <:Real} and output::Dict{<:Resource, <:Real}:\nBoth fields describe the input and output Resources with their corresponding conversion factors as dictionaries. The values correspond to charge and discharge efficiencies from the HydroStorage nodes.\nAll values have to be in the range 0 1.\ndata::Vector{Data}:\nAn entry for providing additional data to the model. In the current version, it is only relevant for additional investment data when EnergyModelsInvestments is used.","category":"page"},{"location":"nodes/hydropower/#nodes-hydro_power-fields-new","page":"Simple Hydropower","title":"Additional fields","text":"","category":"section"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"HydroStorage nodes add additional fields compared to RefStorage nodes. These fields are located below the field discharge, and hence, correspond to the 4ᵗʰ to 6ᵗʰ fields of the node. As a consequence, stor_res is now the 7ᵗʰ field compared to being the 4ᵗʰ in a RefStorage node.","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"The individual fields are related to specifics of hydropower. These fields are given as:","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"level_init::TimeProfile:\nThe initial level corresponds to the amount of electricity stored in the reservoir at the beginning of each strategic period. It can be provided as OperationalProfile. In practice, it is however sufficient to provide it as StrategicProfile as only a single value is used.\nThe initial levels have to be non-negative and less than the maximum storage capacity.\nlevel_inflow::TimeProfile:\nThe inflow is representing the potential electricity flowing into the reservoir in each operational period. It is depending on rivers flowing into the reservoir or rainfall. It can be provided as OperationalProfile.\nlevel_min::TimeProfile:\nThe minimum level provides a lower bound on the usage of the storage node in each operational period. This lower bound can be enforced by regulators to maintain a minimum amount of available stored electricity. The current implementation does not allow for a violation of the constraint, although this can be implemented in a latter stage. It can be provided as OperationalProfile.\nThe inflow has to be able in combination with the initial level to provide the required minimum level in the first operational period of each strategic period. In addition, all values have to be in the range 0 1.","category":"page"},{"location":"nodes/hydropower/#nodes-hydro_power-math","page":"Simple Hydropower","title":"Mathematical description","text":"","category":"section"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"In the following mathematical equations, we use the name for variables and functions used in the model. Variables are in general represented as","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"textttvar_exampleindex_1 index_2","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"with square brackets, while functions are represented as","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"func_example(index_1 index_2)","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"with paranthesis.","category":"page"},{"location":"nodes/hydropower/#nodes-hydro_power-math-var","page":"Simple Hydropower","title":"Variables","text":"","category":"section"},{"location":"nodes/hydropower/#nodes-hydro_power-math-var-stand","page":"Simple Hydropower","title":"Standard variables","text":"","category":"section"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"The hydro power node types utilize all standard variables from RefStorage, as described on the page Optimization variables. The variables include:","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"textttopex_var\ntextttopex_fixed\ntextttstor_level\ntextttstor_level_inst\ntextttstor_charge_use\ntextttstor_charge_inst\ntextttstor_discharge_use\ntextttstor_discharge_inst\ntextttflow_in\ntextttflow_out\ntextttstor_level_Δ_op\ntextttstor_level_Δ_rp if the TimeStruct includes RepresentativePeriods","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"The variables textttflow_in and textttstor_charge_use are fixed to a value of 0 in the function constraints_flow_in for HydroStor nodes as these nodes correspond to regulated hydropower plants and not pumped hydropower plants..","category":"page"},{"location":"nodes/hydropower/#nodes-hydro_power-math-add","page":"Simple Hydropower","title":"Additional variables","text":"","category":"section"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"HydroStorage nodes must allow for spillage of surplus stored water. Hence, a single additional variable is declared through dispatching on the method EnergyModelsBase.variables_node():","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"texttthydro_spilln t: Spilled electricity in hydropower node n in operational period t with a typical unit of MW.\nThe spillage in each operational period is a rate specifying how much electricity is spilled, that is not routed the the grid, but instead directed from the turbines to avoid overfilling the reservoir. It hence allows for an overflow from a reservoir if the inflow to a reservoir exceeds its capacity and the outflow through power generation.","category":"page"},{"location":"nodes/hydropower/#nodes-hydro_power-math-con","page":"Simple Hydropower","title":"Constraints","text":"","category":"section"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"The following sections omit the direct inclusion of the vector of hydropower storage nodes. Instead, it is implicitly assumed that the constraints are valid forall n  N for all HydroStor or PumpedHydroStor types if not stated differently. In addition, all constraints are valid forall t in T (that is in all operational periods) or forall t_inv in T^Inv (that is in all strategic periods).","category":"page"},{"location":"nodes/hydropower/#nodes-hydro_power-math-con-stand","page":"Simple Hydropower","title":"Standard constraints","text":"","category":"section"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"Hydropower storages nodes utilize in general the standard constraints described on Constraint functions for RefStorage nodes.","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"warning: stor_charge_xxx\nThe constraints for textttstor_charge_use are only implemented for PumpedHydroStor nodes. This also includes the contribution to the variables textttopex_fixed and textttopex_var.","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"These standard constraints are:","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"constraints_capacity:\nbeginaligned\ntextttstor_level_instn t  geq textttstor_leveln t \ntextttstor_charge_instn t  geq textttstor_charge_usen t \ntextttstor_discharge_instn t  geq textttstor_discharge_usen t \nendaligned\nconstraints_capacity_installed:\nbeginaligned\ntextttstor_level_instn t  = capacity(level(n) t) \ntextttstor_charge_instn t  = capacity(charge(n) t) \ntextttstor_discharge_instn t  = capacity(charge(n) t)\nendaligned\ntip: Using investments\nThe function constraints_capacity_installed is also used in EnergyModelsInvestments to incorporate the potential for investment. Nodes with investments are then no longer constrained by the parameter capacity.\nconstraints_level: The level constraints are in general following the default approach with minor modifications. They are explained in detail below in Level constraints.\nconstraints_opex_fixed:\nbeginaligned\ntextttopex_fixedn t_inv =  \n  opex_fixed(level(n) t_inv) times textttstor_level_instn first(t_inv) +  \n  opex_fixed(charge(n) t_inv) times textttstor_charge_instn first(t_inv) +  \n  opex_fixed(discharge(n) t_inv) times textttstor_discharge_instn first(t_inv)\nendaligned\ntip: Why do we use `first()`\nThe variables textttstor_level_inst are declared over all operational periods (see the section on Capacity variables for further explanations). Hence, we use the function first(t_inv) to retrieve the installed capacities in the first operational period of a given strategic period t_inv in the function constraints_opex_fixed.\nconstraints_opex_var:\nbeginaligned\ntextttopex_varn t_inv =  sum_t in t_inv\n  opex_var(level(n) t) times textttstor_leveln t times scale_op_sp(t_inv t) +  \n  opex_var(charge(n) t) times textttstor_charge_usen t times scale_op_sp(t_inv t) +  \n  opex_var(discharge(n) t) times textttstor_discharge_usen t times scale_op_sp(t_inv t)\nendaligned\ntip: The function `scale_op_sp`\nThe function scale_op_sp(t_inv t) calculates the scaling factor between operational and strategic periods. It also takes into account potential operational scenarios and their probability as well as representative periods.\nconstraints_data:\nThis function is only called for specified data of the CO₂ storage node, see above.","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"info: Implementation of OPEX\nThe fixed and variable OPEX constribubtion for the level and the charge capacities are only included if the corresponding storage parameters have a field opex_fixed and opex_var, respectively. Otherwise, they are omitted.","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"The function constraints_flow_in is extended with a new method for hydropower nodes to differentiate whether the node is a pumped hydropower node or not. The standard constraints given by","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"beginaligned\ntextttstor_level_instn t  geq textttstor_leveln t \ntextttstor_charge_instn t  geq textttstor_charge_usen t \nendaligned","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"are extended with a constraint for PumpedHydroStor nodes given by","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"textttflow_inn t p times inputs(n p)  =\ntextttstor_charge_usen t  qquad forall p in inputs(n)","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"while the variables textttflow_in and textttstor_charge_use are fixed to a value of 0 for HydroStor nodes.","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"These constraints allow either to include an efficiency for filling the reservoir (PumpedHydroStor) or avoiding unconstrained variables (HydroStor).","category":"page"},{"location":"nodes/hydropower/#nodes-hydro_power-math-con-add","page":"Simple Hydropower","title":"Additional constraints","text":"","category":"section"},{"location":"nodes/hydropower/#nodes-hydro_power-math-con-add-node","page":"Simple Hydropower","title":"Constraints calculated in create_node","text":"","category":"section"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"The outlet flow constraints are given as","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"textttflow_outn t p =\ntextttstor_charge_usen t times outputs(n p) qquad forall p in outputs(n)","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"As a consequence, similar to the inlet flow constraint, we can specify an efficiency between 0 and 1 to account for loses in the turbine.","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"In addition a constraint on the maximum discharge given by","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"textttstor_discharge_usen t leq textttstor_leveln t","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"is included to constrain the discharge further. This constraint is in practice not active as the storage level is bound at a lower bound provided through the field level_min.","category":"page"},{"location":"nodes/hydropower/#nodes-hydro_power-math-con-add-level","page":"Simple Hydropower","title":"Level constraints","text":"","category":"section"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"The level constraints are in general slightly more complex to understand. The overall structure is outlined on Constraint functions. The level constraints are called through the function constraints_level which then calls additional functions depending on the chosen time structure (whether it includes representative periods and/or operational scenarios) and the chosen storage behaviour.","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"The hydro power nodes utilize the majority of the concepts from EnergyModelsBase but require adjustments for both constraining the variable textttstor_level_Δ_op and specifying how the storage node has to behave in the first operational period of a strategic period. This is achieved through dispatching on the functions constraints_level_aux.","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"The constraints introduced in constraints_level_aux  can be divided in three groups:","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"the energy balance,\nbeginaligned\n  textttstor_level_Δ_opn t =  \n  level_inflow(n t) + textttstor_charge_usen t -  \n  textttstor_discharge_usen t - texttthydro_spilln t\nendaligned\nthe initial storage level in the first operational period of a strategic period, and\nbeginaligned\n  textttstor_level n first(t_inv) =  \n  level_init(n first(t_inv)) +  \n  textttstor_level_Δ_opn first(t_inv) times duration(first(t_inv))\nendaligned\nthe minimum level constraint\ntextttstor_leveln t geq level_min(n t) times textttstor_level_instn t","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"corresponding to the change in the storage level in an operational period and strategic period, respectively.","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"If the time structure includes representative periods, we also calculate the change of the storage level in each representative period within the function constraints_level_iterate (from EnergyModelsBase):","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"  textttstor_level_Δ_rpn t_rp = sum_t in t_rp\n  textttstor_level_Δ_opn t times scale_op_sp(t_inv t)","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"The general level constraint is calculated in the function constraints_level_iterate (from EnergyModelsBase):","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"textttstor_leveln t = prev_level +\ntextttstor_level_Δ_opn t times duration(t)","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"in which the value prev_level is depending on the type of the previous operational (t_prev) and strategic level (t_invprev) (as well as the previous representative period (t_rpprev)). It is calculated through the function previous_level.","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"In the case of hydropower node, we can distinguish the following cases:","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"The first operational period in the first representative period in any strategic period (given by typeof(t_prev) = typeof(t_rp prev) and typeof(t_invprev) = NothingPeriod). In this situation, we can distinguish three cases, the time structure does not include representative periods:\nprev_level = textttstor_leveln last(t_inv)\nthe time structure includes representative periods and the storage behavior is given as CyclicRepresentative:\nprev_level = textttstor_leveln last(t_rp)\nthe time structure includes representative periods and the storage behavior is given as CyclicStrategic:\nbeginaligned\n prev_level =  textttstor_leveln first(t_rplast) -  \n   textttstor_level_Δ_opn first(t_rplast) times duration(first(t_rplast)) +  \n   textttstor_level_Δ_rpn t_rplast times duration_strat(t_rplast)\nendaligned\nThe first operational period in subsequent representative periods in any strategic period (given by typeof(t_prev) = nothing) if the the storage behavior is given as CyclicStrategic:\n\nbeginaligned\n prev_level =  textttstor_leveln first(t_rpprev) -  \n   textttstor_level_Δ_opn first(t_rpprev) times duration(first(t_rpprev)) +  \n   textttstor_level_Δ_rpn t_rpprev\nendaligned\nThis situation only occurs in cases in which the time structure includes representative periods.\nAll other operational periods:\n\n prev_level = textttstor_leveln t_prev","category":"page"},{"location":"nodes/hydropower/","page":"Simple Hydropower","title":"Simple Hydropower","text":"All cases are implemented in EnergyModelsBase simplifying the design of the system.","category":"page"},{"location":"manual/simple-example/#man-exampl","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"For the content of the example, see the examples directory in the project repository.","category":"page"},{"location":"manual/simple-example/#The-package-is-installed-with-]-add","page":"Examples","title":"The package is installed with ] add","text":"","category":"section"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"From the Julia REPL, run","category":"page"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"# Starts the Julia REPL\njulia> using EnergyModelsRenewableProducers\n# Get the path of the examples directory\njulia> exdir = joinpath(pkgdir(EnergyModelsRenewableProducers), \"examples\")\n# Include the code into the Julia REPL to run the first example of the NonDisRes node\njulia> include(joinpath(exdir, \"simple_nondisres.jl\"))\n# Include the code into the Julia REPL to run the first example of the Hydropower node\njulia> include(joinpath(exdir, \"simple_hydro_power.jl\"))","category":"page"},{"location":"manual/simple-example/#The-code-was-downloaded-with-git-clone","page":"Examples","title":"The code was downloaded with git clone","text":"","category":"section"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"The examples can then be run from the terminal with","category":"page"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"/path/to/EnergyModelsRenewableProducers.jl/examples $ julia simple_nondisres.jl\n/path/to/EnergyModelsRenewableProducers.jl/examples $ julia simple_hydro_power.jl","category":"page"},{"location":"manual/quick-start/#quick_start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"Install the most recent version of Julia\nInstall the package EnergyModelsBase and the time package TimeStruct, by running:\n] add TimeStruct\n] add EnergyModelsBase\nThese packages are required as we do not only use them internally, but also for building a model.\nInstall the package EnergyModelsRenewableProducers\n] add EnergyModelsRenewableProducers","category":"page"},{"location":"library/internals/methods-EMB/#lib-int-met_emb","page":"Methods - EnergyModelsBase","title":"Methods - EnergyModelsBase","text":"","category":"section"},{"location":"library/internals/methods-EMB/#lib-int-met_emb-idx","page":"Methods - EnergyModelsBase","title":"Index","text":"","category":"section"},{"location":"library/internals/methods-EMB/","page":"Methods - EnergyModelsBase","title":"Methods - EnergyModelsBase","text":"Pages = [\"methods-EMB.md\"]","category":"page"},{"location":"library/internals/methods-EMB/#lib-int-met_emb-ext","page":"Methods - EnergyModelsBase","title":"Extension methods","text":"","category":"section"},{"location":"library/internals/methods-EMB/","page":"Methods - EnergyModelsBase","title":"Methods - EnergyModelsBase","text":"EnergyModelsBase.variables_node\nEnergyModelsBase.create_node\nEnergyModelsBase.level","category":"page"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.variables_node","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.variables_node","text":"EMB.variables_node(m, 𝒩ⁿᵈʳ::Vector{<:AbstractNonDisRES}, 𝒯, modeltype::EnergyModel)\n\nCreate the optimization variable :curtailment for every AbstractNonDisRES node. This method is called from EnergyModelsBase.jl.\n\n\n\n\n\nEMB.variables_node(m, 𝒩::Vector{<:HydroStorage}, 𝒯, modeltype::EnergyModel)\n\nCreate the optimization variable :hydro_spill for every HydroStorage node. This variable enables hydro storage nodes to spill water from the reservoir without producing energy. Wihtout this slack variable, parameters with too much inflow would else lead to an infeasible model. \n\n\n\n\n\nEMB.variables_node(m, 𝒩::Vector{HydroGate}, 𝒯, modeltype::EnergyModel)\n\nCreates the following additional variables for ALL HydroGate nodes that have additional constraints through ScheduleConstraint:\n\ngate_penalty_up[n, t, p] is the up penalty variable of hydro gate n in operational period t for resource p.\ngate_penalty_down[n, t, p] is the down penalty variable of hydro gate n in operational period t for resource p.\n\nThese variables enable HydroGate nodes to penalize a violation of the discharge constraint instead of providing a strict upper bound. They hence transform the constraint to a soft constraint. Without these penalty variables, too strict discharge restrictions may cause an infeasible model.\n\n\n\n\n\nEMB.variables_node(m, 𝒩::Vector{HydroReservoir{T}}, 𝒯, modeltype::EnergyModel) where {T <: EMB.StorageBehavior}\n\nCreates the following additional variables for ALL HydroReservoir nodes that have additional constraints through ScheduleConstraint:\n\nrsv_penalty_up[n, t, p] is the up penalty variable of hydro reservoir n in operational period t for resource p.\nrsv_penalty_down[n, t, p] is the down penalty variable of hydro reservoir n in operational period t for resource p.\n\nThese variables enable HydroReservoir nodes to penalize a violation of the volume constraint instead of providing a strict bound. They hence transform the constraint to a soft constraint. Without these penalty variables, too strict volume restrictions may cause an infeasible model.\n\n\n\n\n\nEMB.variables_node(m, 𝒩::Vector{:<HydroUnit}, 𝒯, modeltype::EnergyModel)\n\nCreates the following additional variables for ALL HydroUnit nodes that have additional constraints through ScheduleConstraint:\n\ngen_penalty_up[n, t, p] is the up penalty variable of hydro unit n in operational period t for resource p.\nrsv_penalty_down[n, t, p] is the down penalty variable of hydro unit n in operational period t for resource p.\ndischarge_segment[n, t, q] is the discharge segment variable of hydro unit n in operational period t for discharge segment q The capacity of the discharge_segments sums up to the total discharge capacity.\n\nThe first two variables enable HydroUnit nodes to penalize a violation of the generation/pumping constraints instead of providing a strict bound. They hence transform the constraint to a soft constraint. Without these penalty variables, too strict generation/pumping constraints may cause an infeasible model.\n\n\n\n\n\nEMB.variables_node(m, 𝒩::Vector{<:AbstractBattery}, 𝒯, modeltype::EnergyModel)\n\nDeclaration of reserve variables for all AbstractBattery nodes. The following reserve variables are declared:\n\nbat_prev_use[n, t] is the accumulated charge effect of an AbstractBattery up to operational period t.\nbat_prev_use_sp[n, t_inv] is the accumulated charge effect of an AbstractBattery up to investment period t_inv.\nbat_use_sp[n, t_inv] is the accummulated charge effect of an AbstractBattery in investment period t_inv.\nbat_use_rp[n, t_rp] is the accummulated charge effect of an AbstractBattery in representative period t_rp. It is only declared if the TimeStructure includes RepresentativePeriods.\nbat_stack_replace_b[n, t_inv] is a binary variable for identification of battery battery stack replacement. Stack replacement occurs before the first operational period of a strategic period. It is only declared for batterys which utilize an AbstractBatteryLife that includes degradation.\n\n\n\n\n\nEMB.variables_node(m, 𝒩::Vector{<:ReserveBattery}, 𝒯, modeltype::EnergyModel)\n\nDeclaration of reserve variables for ReserveBattery nodes. The following reserve variables are declared:\n\nbat_res_up[n, t] is the upwards reserve of battery storage n in operational period t.\nbat_res_down[n, t] is the upwards reserve of battery of storage n in operational period t.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.create_node","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.create_node","text":"EMB.create_node(m, n::HydroStorage, 𝒯, 𝒫, modeltype::EnergyModel)\n\nSets all constraints for the regulated hydro storage node.\n\n\n\n\n\nEMB.create_node(m, n::AbstractBattery, 𝒯, 𝒫, modeltype::EnergyModel)\n\nSet all constraints for a AbstractBattery. Can serve as fallback option for all unspecified subtypes of AbstractBattery. It differs from the function for a standard Storage node through calling the constraint function constraints_usage for calculating the cycles of the node.\n\nCalled constraint functions\n\nconstraints_level,\nconstraints_usage,\nconstraints_reserve,\nconstraints_data for all node_data(n),\nconstraints_flow_in,\nconstraints_flow_out,\nconstraints_capacity,\nconstraints_opex_fixed, and\nconstraints_opex_var.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.level","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.level","text":"level(n::HydroReservoir)\nlevel(n::HydroReservoir, t)\n\nReturns the vol parameter field of the HydroReservoir n either as TimeProfile or in operational period t.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#lib-int-met_emb-con","page":"Methods - EnergyModelsBase","title":"Constraint methods","text":"","category":"section"},{"location":"library/internals/methods-EMB/","page":"Methods - EnergyModelsBase","title":"Methods - EnergyModelsBase","text":"EnergyModelsBase.constraints_capacity\nEnergyModelsBase.constraints_flow_in\nEnergyModelsBase.constraints_flow_out\nEnergyModelsBase.constraints_level_aux\nEnergyModelsBase.constraints_opex_var\nEnergyModelsBase.constraints_opex_fixed","category":"page"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.constraints_capacity","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.constraints_capacity","text":"constraints_capacity(m, n::AbstractNonDisRES, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the constraint on the maximum capacity of a AbstractNonDisRES. Also sets the constraint defining curtailment.\n\n\n\n\n\nconstraints_capacity(m, n::AbstractBattery, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the constraint on the maximum capacity of an AbstractBattery.\n\nIts function flow is changed from the standard approach through calling the function capacity_reduction to identify the reduced storage capacity, depending on the chosen AbstractBatteryLife type.\n\n\n\n\n\nEMB.constraints_capacity(m, n::HydroUnit, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the constraints on the maximum capacity of a HydroUnit node. It differs from the base functions through incorporating the PQ Curve through the function max_normalized_power\n\nFurthermore, the function build_pq_constaints is called for creating additional constraints on the capacity utilization.\n\nwarning: Dispatching on this function\nIf you create a new method for this function, it is crucial to call within said function the function constraints_capacity_installed(m, n, 𝒯, modeltype) if you want to include investment options.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.constraints_flow_in","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.constraints_flow_in","text":"constraints_flow_in(m, n::HydroStor, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nWhen n::HydroStor, the variable :flow_in is fixed to 0 for all potential inputs.\n\n\n\n\n\nconstraints_flow_in(m, n::PumpedHydroStor, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nWhen n::PumpedHydroStor, the variable :flow_in is multiplied with the inputs value to calculate the variable :stor_charge_use.\n\n\n\n\n\nEMB.constraints_flow_in(m, n::HydroGenerator, 𝒯::TimeStructure, modeltype::EnergyModel)\nEMB.constraints_flow_in(m, n::HydroPump, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nMethod for creating the constraint on the inlet flow of a node n.\n\ntip: `HydroGenerator`\nThe constraints enforce that the water inlet flow is equal to the outlet flow at each operational period t, and hence, preserve conservation of mass.\n\nnote: `HydroPump`\nThe electricity flow to the unit is equal to the capacity utilization The flow of the inlet resources can be constrained through calling the function build_schedule_constraint.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.constraints_flow_out","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.constraints_flow_out","text":"constraints_flow_out(m, n::ReserveBattery, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nWhen n::ReserveBattery, the variable :flow_out is also declared for the different reserve resources as identified through the functions reserve_up and reserve_down.\n\n\n\n\n\nEMB.constraints_flow_out(m, n::HydroGate, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the constraint on the outlet flow from a HydroGate. This function implements the schedule and min/max constraints if present.\n\n\n\n\n\nEMB.constraints_flow_out(m, n::HydroGenerator, 𝒯::TimeStructure, modeltype::EnergyModel)\nEMB.constraints_flow_out(m, n::HydroPump, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nMethod for creating the constraint on the oulet flow of a node n.\n\ntip: `HydroGenerator`\nThe electricity flow from the unit is equal to the capacity utilization.\nThe flow of the inlet resources can be constrained through calling the function build_schedule_constraint.\n\nnote: `HydroPump`\nThe constraints enforce that the water outlet flow is equal to the inlet flow at each operational period t, and hence, preserve conservation of mass.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.constraints_level_aux","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.constraints_level_aux","text":"constraints_level_aux(m, n::HydroStorage, 𝒯, 𝒫, modeltype)\n\nFunction for creating the Δ constraint for the level of a HydroStorage node as well as the specification of the initial level in a strategic period.\n\nThe change in storage level in the reservoir at operational periods t is the inflow through :level_inflow plus the input :stor_charge_use minus the production :stor_discharge_use and the spillage of water due to overflow :hydro_spill.\n\n\n\n\n\nconstraints_level_aux(m, n::AbstractBattery, 𝒯, 𝒫, modeltype::EnergyModel)\n\nFunction for creating the Δ constraint for the level of an AbstractBattery node utilizing the efficiencies declared in inputs and outputs of the storage resource.\n\n\n\n\n\nEMB.constraints_level_aux(m, n::HydroReservoir, 𝒯, 𝒫, modeltype::EnergyModel)\n\nCreate the Δ constraint for the level of the HydroReservoir node. The change in storage level in the reservoir at operational periods t is the flow into the reservoir through the variable stor_charge_use and inflow (through the function vol_inflow) minus the flow out of the reservoir through the variable stor_discharge_use.\n\nIn addition, it creates the volume constraints if data is provided.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.constraints_opex_var","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.constraints_opex_var","text":"EMB.constraints_opex_var(m, n::HydroResevoir{T}, 𝒯ᴵⁿᵛ, modeltype::EnergyModel)\nEMB.constraints_opex_var(m, n::HydroGate, 𝒯ᴵⁿᵛ, modeltype::EnergyModel)\nEMB.constraints_opex_var(m, n::HydroUnit, 𝒯ᴵⁿᵛ, modeltype::EnergyModel)\n\nMethod for creating the constraint on the variable OPEX. The individual methods extend the functions of EnergyModelsBase through incorporating the penalty term for constraint violation.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.constraints_opex_fixed","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.constraints_opex_fixed","text":"constraints_opex_fixed(m, n::AbstractBattery, 𝒯ᴵⁿᵛ, modeltype::EnergyModel)\n\nFunction for creating the constraint on the fixed OPEX of a generic AbstractBattery.\n\nThe functions nodes includes fixed OPEX for charge, level, and discharge if the node has the corresponding storage parameter. The individual contributions are in all situations calculated based on the installed capacities.\n\nIn addition, battery stack replacement is included if the battery_life has a limited cycle lifetime. The division by durationstrat(tinv) for the battery stack replacement is required due to the multiplication with the duration in the objective function calculation.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#lib-int-met_emb-check","page":"Methods - EnergyModelsBase","title":"Check methods","text":"","category":"section"},{"location":"library/internals/methods-EMB/","page":"Methods - EnergyModelsBase","title":"Methods - EnergyModelsBase","text":"EnergyModelsBase.check_node\nEnergyModelsBase.check_node_data","category":"page"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.check_node","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.check_node","text":"EMB.check_node(n::NonDisRES, 𝒯, modeltype::EnergyModel, check_timeprofiles::Bool)\n\nThis method checks that the NonDisRES node is valid.\n\nIt reuses the standard checks of a Source node through calling the function EMB.check_node_default, but adds an additional check on the data.\n\nChecks\n\nThe field cap is required to be non-negative (similar to the Source check).\nThe value of the field fixed_opex is required to be non-negative and accessible through a StrategicPeriod as outlined in the function check_fixed_opex(n, 𝒯ᴵⁿᵛ, check_timeprofiles).\nThe values of the dictionary output are required to be non-negative (similar to the Source check).\nThe field profile is required to be in the range 0 1 for all time steps t  mathcalT.\n\n\n\n\n\nEMB.check_node(n::HydroStorage, 𝒯, modeltype::EnergyModel, check_timeprofiles::Bool)\n\nThis method checks that the HydroStorage node is valid.\n\nIt reuses the standard checks of a Storage node through calling the function EMB.check_node_default, but adds an additional check on the data.\n\nChecks\n\nThe TimeProfile of the field capacity in the type in the field charge is required to be non-negative if the chosen composite type has the field capacity.\nThe TimeProfile of the field capacity in the type in the field level is required to be non-negative`.\nThe TimeProfile of the field capacity in the type in the field discharge is required to be non-negative if the chosen composite type has the field capacity.\nThe TimeProfile of the field fixed_opex is required to be non-negative and accessible through a StrategicPeriod as outlined in the function check_fixed_opex(n, 𝒯ᴵⁿᵛ, check_timeprofiles) for the chosen composite type .\nThe field output can only include a single Resource.\nThe value of the field output is required to be in the range 0 1.\nThe value of the field input is required to be in the range 0 1.\nThe value of the field level_init is required to be in the range  level_min 1 cdot stor_cap(t) for all time steps t  mathcalT.\nThe value of the field level_init is required to be in the range 0 1.\nThe value of the field level_min is required to be in the range 0 1.\n\n\n\n\n\nEMB.check_node(n::HydroReservoir, 𝒯, modeltype::EnergyModel, check_timeprofiles::Bool)\n\nThis method checks that the HydroReservoir node is valid.\n\nChecks\n\nThe TimeProfile of the capacity of the HydroReservoir level is required to be non-negative.\nThe TimeProfile of the field fixed_opex is required to be non-negative and accessible through a StrategicPeriod as outlined in the function function EMB.check_fixed_opex() for the field level, if included.\nThe TimeProfile of the vol_inflow of the HydroReservoir is required to be non-negative.\n\n\n\n\n\nEMB.check_node(n::HydroGate, 𝒯, modeltype::EnergyModel, check_timeprofiles::Bool)\n\nThis method checks that the HydroGate node is valid.\n\nChecks\n\nThe field cap is required to be non-negative.\nThe value of the field fixed_opex is required to be non-negative and accessible through\n\na StrategicPeriod as outlined in the function EMB.check_fixed_opex().\n\n\n\n\n\nEMB.check_node(n::HydroUnit, 𝒯, modeltype::EnergyModel, check_timeprofiles::Bool)\n\nThis method checks that the HydroGenerator and HydroPump nodes are valid.\n\nChecks\n\nThe field cap is required to be non-negative.\nThe PqPoints vectors are required to have the same length.\nThe PqPoints vectors should start at 0.\nThe PqPoints vectors are required to be increasing.\nOne of the PqPoints vectors should have values between 0 and 1.\nThe PqPoints curve should be concave for generators and convex for pumps.\nThe value of the field fixed_opex is required to be non-negative and accessible through a StrategicPeriod as outlined in the function EMB.check_fixed_opex().\n\n\n\n\n\nEMB.check_node(n::AbstractBattery, 𝒯, modeltype::EnergyModel, check_timeprofiles::Bool)\n\nThis method checks that the AbstractBattery node is valid.\n\nIt reuses the standard checks of a Storage node through calling the function EMB.check_node_default, but adds an additional check on the data.\n\nChecks\n\nThe TimeProfile of the field capacity in the type in the field charge is required to be non-negative.\nThe TimeProfile of the field capacity in the type in the field level is required to be non-negative`.\nThe TimeProfile of the field capacity in the type in the field discharge is required to be non-negative.\nThe TimeProfile of the field fixed_opex is required to be non-negative and accessible through a StrategicPeriod as outlined in the function check_fixed_opex(n, 𝒯ᴵⁿᵛ, check_timeprofiles) for the chosen composite type .\nThe field output can only include a single Resource.\nThe value of the field input is required to be in the range 0 1.\nThe value of the field output is required to be in the range 0 1\nThe AbstractBatteryLife must follow the provided values as outlined in the function check_battery_life.\n\n\n\n\n\nEMB.check_node(n::ReserveBattery, 𝒯, modeltype::EnergyModel, check_timeprofiles::Bool)\n\nThis method checks that the ReserveBattery node is valid.\n\nIt reuses the standard checks of a Storage node through calling the function EMB.check_node_default, but adds an additional check on the data.\n\nChecks\n\nThe TimeProfile of the field capacity in the type in the field charge is required to be non-negative.\nThe TimeProfile of the field capacity in the type in the field level is required to be non-negative`.\nThe TimeProfile of the field capacity in the type in the field discharge is required to be non-negative.\nThe TimeProfile of the field fixed_opex is required to be non-negative and accessible through a StrategicPeriod as outlined in the function check_fixed_opex(n, 𝒯ᴵⁿᵛ, check_timeprofiles) for the chosen composite type .\nThe field output can only include a single Resource.\nThe value of the field input is required to be in the range 0 1.\nThe value of the field output is required to be in the range 0 1\nThe resources in the array reserve_up cannot be part of the resources in the dictionaries dictionaries input and output.\nThe resources in the array reserve_down cannot be part of the resources in the dictionaries input and output.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.check_node_data","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.check_node_data","text":"EMB.check_node_data(n::EMB.Node, data::ScheduleConstraint, 𝒯, modeltype::EnergyModel, check_timeprofiles::Bool)\n\nPerforms various checks on ScheduleConstraint data for all nodes.\n\nChecks\n\nThe the field resource is required to be a valid resource of the node.\nThe value of constraints are required to be in the range 0 1 for all time steps t  mathcalT.\nThe penalty of constraints are required to be non-negative for all time steps t  mathcalT.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#lib-int-met_emb-field","page":"Methods - EnergyModelsBase","title":"Field extraction methods","text":"","category":"section"},{"location":"library/internals/methods-EMB/","page":"Methods - EnergyModelsBase","title":"Methods - EnergyModelsBase","text":"EnergyModelsBase.capacity\nEnergyModelsBase.inputs\nEnergyModelsBase.outputs","category":"page"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.capacity","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.capacity","text":"capacity(n::HydroUnit, t, p::Resource)\ncapacity(n::HydroGate, t, p::Resource)\n\nReturns the capacity of HydroUnit n in operational period t for a given resource p. In the case of a HydroGate, this function reverts to capacity(n, t) to allow its application in multiple methods.\n\nwarning: Warning\nThe resource p must be either the electricity_resource or water_resource. Otherwise, an error is raised.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.inputs","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.inputs","text":"inputs(n::HydroReservoir)\ninputs(n::HydroReservoir, p::Resource)\n\nReturns the input resources of a HydroReservoir n, specified via the field stor_res.\n\nIf the resource p is specified, it returns a value of 1. This behaviour should in theory not occur.\n\n\n\n\n\ninputs(n::HydroGate)\ninputs(n::HydroGate, p::Resource)\n\nReturns the input resources of a HydroGate n, specified via the field resource.\n\nIf the resource p is specified, it returns a value of 1. This behaviour should in theory not occur.\n\n\n\n\n\ninputs(n::HydroGenerator)\ninputs(n::HydroGenerator, p::Resource)\n\nReturns the input resources of a HydroGenerator n, specified via the field water_resource.\n\nIf the resource p is specified, it returns a value of 1. This behaviour should in theory not occur.\n\n\n\n\n\ninputs(n::HydroPump)\ninputs(n::HydroPump, p::Resource)\n\nReturns the input resources of a HydroPump n, specified via the fields water_resource and electricity_resource.\n\nIf the resource p is specified, it returns a value of 1. This behaviour should in theory not occur.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.outputs","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.outputs","text":"outputs(n::HydroReservoir)\noutputs(n::HydroReservoir, p::Resource)\n\nReturns the output resources of a HydroReservoir n, specified via the field stor_res.\n\nIf the resource p is specified, it returns a value of 1. This behaviour should in theory not occur.\n\n\n\n\n\noutputs(n::HydroGate)\noutputs(n::HydroGate, p::Resource)\n\nReturns the output resources of a HydroGate n, specified via the field resource.\n\nIf the resource p is specified, it returns a value of 1. This behaviour should in theory not occur.\n\n\n\n\n\noutputs(n::HydroGenerator)\noutputs(n::HydroGenerator, p::Resource)\n\nReturns the output resources of a HydroGenerator n, specified via the fields water_resource and electricity_resource.\n\nIf the resource p is specified, it returns a value of 1. This behaviour should in theory not occur.\n\n\n\n\n\noutputs(n::HydroPump)\noutputs(n::HydroPump, p::Resource)\n\nReturns the output resources of a HydroPump n, specified via the field water_resource.\n\nIf the resource p is specified, it returns a value of 1. This behaviour should in theory not occur.\n\n\n\n\n\nEMB.outputs(n::ReserveBattery)\nEMB.outputs(n::ReserveBattery, p::Resource)\n\nWhen the node is an ReserveBattery, it returns both the output and reserve resources.\n\nIf the resource p is specified, it returns the value if the resource is in the output dictionary. Otherwise, it returns a value of 0.\n\n\n\n\n\n","category":"function"},{"location":"nodes/det_hydropower/generator/#nodes-det_hydro_power-generator","page":"Hydro generator node","title":"Hydro generator node","text":"","category":"section"},{"location":"nodes/det_hydropower/generator/#nodes-det_hydro_power-generator-fields","page":"Hydro generator node","title":"Introduced type and its field","text":"","category":"section"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"The HydroGenerator node represents a hydropower unit used to generate electricity in a hydropower system. In its simplest form, the HydroGenerator can convert potential energy stored in the reservoirs to electricity by discharging water between reservoirs at different head levels under the assumption that the reservoirs have constant head level. The conversion to electric energy can be described by an power-discharge relationship referred to as the PQ-curve.","category":"page"},{"location":"nodes/det_hydropower/generator/#nodes-det_hydro_power-generator-fields-stand","page":"Hydro generator node","title":"Standard fields","text":"","category":"section"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"HydroGenerator nodes build on the HydroUnit and the  RefNetworkNode  nodes, but add additional fields. The standard fields are:","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"id:\nThe field id is only used for providing a name to the node. This is similar to the approach utilized in EnergyModelsBase.\ncap::TimeProfile:\nThe installed capacity corresponds to the nominal capacity of the node. It can refer to either the installed power or discharge capacity of the hydropower unit.\nopex_var::TimeProfile:\nThe variable operational expenses are based on the capacity utilization through the variable cap_use.\nopex_fixed::TimeProfile:\nThe fixed operating expenses are relative to the installed capacity (through the field cap) and the chosen duration of a strategic period as outlined on Utilize TimeStruct.\nIt is important to note that you can only use FixedProfile or StrategicProfile for the fixed OPEX, but not RepresentativeProfile or OperationalProfile. In addition, all values have to be non-negative.\ndata::Vector{Data}:\nAn entry for providing additional data to the model.\nnote: Additional constraints\nThe data field can be used to add minimum, maximum, and schedule constraints on the power generation or water discharge using the general constraints types.","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"warning: Input/output fields\nHydroGenerator nodes do not utilize the fields input and output. Instead, the input and output resources are identified from the fields water_resource and electricity_resource described below.","category":"page"},{"location":"nodes/det_hydropower/generator/#nodes-det_hydro_power-generator-fields-add","page":"Hydro generator node","title":"Additional fields","text":"","category":"section"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"HydroGenerator nodes introduce the following additional fields:","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"pq_curve::AbstractPqCurve:\nDescribes the relationship between generated power (electricity) and discharge of water. The input can be provided by using the subtype PqPoints or as a single energy equivalent.\nwarning: pq_curve\nThe input provided to the pq_curve field has to be relative to the installed capacity, so that either the maximum discharge or the maximum power value given by the PqPoints equals 1. If a single energy equivalent is provided, it is required that the field cap must refer to the power capacity of the HydroGenerator node.\nwater_resource::Resource:\nThe water resource that the node discharges to generate electricity.\nelectricity_resource::Resource:\nThe electricity resource generated from the node.","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"note: Input/output fields\nHydroGenerator nodes include the fields water_resource and electricity_resource field instead of the input and output fields of RefNetworkNode. The conversion of the water resource is set to 1 since the amount of water in the system is constant. The conversion to electricity is described by the input provided in the pq_curve::AbstractPqCurve field.","category":"page"},{"location":"nodes/det_hydropower/generator/#nodes-det_hydro_power-generator-math","page":"Hydro generator node","title":"Mathematical description","text":"","category":"section"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"The HydroGenerator inherits its mathematical description from the HydroUnit which is an abstract subtype of NetworkNode.","category":"page"},{"location":"nodes/det_hydropower/generator/#nodes-det_hydro_power-generator-math-var","page":"Hydro generator node","title":"Variables","text":"","category":"section"},{"location":"nodes/det_hydropower/generator/#nodes-det_hydro_power-generator-math-var-stand","page":"Hydro generator node","title":"Standard variables","text":"","category":"section"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"The HydroGenerator utilizes the standard variables from the NetworkNode, as described on the page Optimization variables.","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"textttopex_var\ntextttopex_fixed\ntextttcap_use\ntextttcap_inst\ntextttflow_in\ntextttflow_out","category":"page"},{"location":"nodes/det_hydropower/generator/#nodes-det_hydro_power-generator-math-add","page":"Hydro generator node","title":"Additional variables","text":"","category":"section"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"In addition to the standard variables, the variables presented below are defined for HydroUnit. These variabels are hence created for HydroGenerator nodes.","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"textttdischarge_segmentsn t q: One discharge variable is defined for each segment q of the PQ-curve defined by the field pq_curve of node n in operational period t with unit volume per time unit.\nIf PqPoints are provided, the number of discharge segments will be Q, where Q+1 is the length of the vectors in the fields of PqPoints. There is only one discharge segment if an energy equivalent is used. The variables textttdischarge_segments define the utilisation of each discharge segment and sum up to the total discharge.\nwarning: discharge_segments\nSequential allocation is not enforced by binary variables, but allocation will occure sequentially if the problem if set up correctly. Penalties for spilling water, a non-concave PQ-curve or an otherwise non-convex problem are examples thay may result in a non-sequential allocation.","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"The following variables are created if required by the additional constraints:","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"textttgen_penalty_upn t p: Variable for penalizing violation of the maximum constraint of the resource p in direction up in HydroGenerator node n in operational period t with unit volume per time unit.\nUp implies in this case that the electricity generation is larger than planned.\ntextttgen_penalty_downn t p: Variable for penalizing violation of the maximum constraint of the resource p in direction down in HydroGenerator node n in operational period t with unit volume per time unit.\nDown implies in this case that the electricity generation is smaller than planned.","category":"page"},{"location":"nodes/det_hydropower/generator/#nodes-det_hydro_power-generator-math-con","page":"Hydro generator node","title":"Constraints","text":"","category":"section"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"In the following sections the vector of HydroGenerator nodes are omitted from the descriptions. Instead, it is implicitly assumed that the constraints are valid forall n  N for all HydroGenerator types if not stated differently. In addition, all constraints are valid forall t in T (that is in all operational periods) or forall t_inv in T^Inv (that is in all strategic periods).","category":"page"},{"location":"nodes/det_hydropower/generator/#nodes-det_hydro_power-generator-math-con-stand","page":"Hydro generator node","title":"Standard constraints","text":"","category":"section"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"HydroGenerator nodes utilize in general the standard constraints described in Constraint functions for NetworkNode. The majority of these constraints are hence ommitted in the following description.","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"The function constraints_capacity rquires a new method to account for the included PQ-curve:","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"beginaligned\n    textttcap_usen t leq textttcap_instn t times P_norm^max\nendaligned","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"Where capacity(n, t) is the installed capacity of node n in operational period t and P_norm^max is the maximum normalized power capacity identified through the function max_normalized_power. If the capacity refers to power, the PqPoints power_levels ranges between 0 and 1 and P_norm^max will also be 1. If the capacity refers to flow, the discharge_levels ranges between 0 and 1, while power_levels may take other values and P_norm^max represents the last element of the power_levels vector.","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"The function constraints_opex_var requires a new method as we have to include the penalty variables for violating the constraints if required:","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"beginaligned\n  textttopex_varn t_inv = \n    sum_t in t_inv  Big( opex_var(n t) times textttcap_usen t + \n    sum_p in P^res Big( penalty(c_up t) times textttgen_penalty_upn t p + \n    penalty(c_down t) times textttgen_penalty_downn t p Big) Big) times scale_op_sp(t_inv t)\nendaligned","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"where penalty() returns the penalty value for violation in the upward and downward direction of constraints with penalty variables, denoted by c_up and  c_up respectively. The set P^res contains the water and power resources of node n.","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"tip: The function `scale_op_sp`\nThe function scale_op_sp(t_inv t) calculates the scaling factor between operational and strategic periods. It also takes into account potential operational scenarios and their probability as well as representative periods.","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"Furthermore, we provide new methods for the flow constraints for HydroGenerator nodes:","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"constraints_flow_in:\nIt is assumed that the amount of water is constant for HydroGenerator nodes, and the flow of water into the node therefore equals the flow out:\ntextttflow_inn t water_resource(n) = textttflow_outn t water_resource(n)\nconstraints_flow_out:\nThe flow out of water is constrained to total discharge given by the sum of the textttdischarge_segmentsntq variables, where Q is the number of segments in the PQ-curve (i.e., Q+1 PQ-points):\ntextttflow_outn t water_resource(n) = sum_q=1^Qtextttdischarge_segmentsntq\nThe flow of electricity out of the node is given by the textttcap_usen t variables:\ntextttflow_outn t electricity_resource(n) = textttcap_usen t\nIn addition to being constrained by the installed capacity, the variables textttcap_use  are constrained by the discharge of water multiplied with the conversion rate given by textttEq which is the slope of each segment in the PQ-curve:\ntextttcap_usen t = sum_q=1^Q(textttdischarge_segmentsntq times textttEq)\nThe discharge segments are constrained by the discharge_levels of the PqPoints:\nbeginaligned\n    textttdischarge_segmentn t q leq  capacity(n t) times (discharge_levelsq+1  \n    - discharge_levelsq) qquad forall q in 1Q \nendaligned\nThe capacity(n, t) returns the installed capacity and is used to scale the relative values of the  PqPoints to absolute values.","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"note: Energy equivalent\nIf a single energy equivalent is used, two points (zero and max) are created to describe a single discharge segment with the slope of the energy equivalent and the capacity of node n. In this case, the installed capacity of the node, provided in the pq_curve::AbstractPqCurve field, has to refer to the power capacity.","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"Furthermore, the method for constraints_flow_out adds discharge and power capacity constraints if additional constraints are provided in the Data field. Soft constraints, i.e., constraints with a penalty, are used if the constraints have non-infinite penalty values. For HydroGenerator nodes, the constraints can be defined for both the electricity_resource and water_resource. The mathematical formualtion of the constraints are:","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"Minimum constraints for discharge or power generation:\nbeginaligned\n  textttflow_outn t p geq  capacity(n t p) times value(c t) qquad  forall c in C^min\n  textttflow_outn t p +  textttgen_penalty_upn t p geq  \n     capacity(n t p) times value(c t) qquad  forall c in C^min \nendaligned\nMaximum constraints for discharge or power generation:\nbeginaligned\n\n  textttflow_outn t p leq  capacity(n t p) times value(c t) qquad  forall c in C^max\n  textttflow_outn t p -  textttgen_penalty_downn t p leq  \n     capacity(n t p) times value(c t) qquad  forall c in C^max \n\nendaligned\nScheduling constraints for discharge or power generation:\nbeginaligned\n  textttflow_outn t p =  capacity(n t p) times value(c t) qquad  forall c in C^sch\n  textttflow_outn t p +  textttgen_penalty_upn t p - textttgen_penalty_downn t =  \n  capacity(n t p) times value(c t) qquad  forall c in C^sch \nendaligned","category":"page"},{"location":"nodes/det_hydropower/generator/","page":"Hydro generator node","title":"Hydro generator node","text":"where value(ct) returns the relative limit of constraint c and  capacity(nt p) returns the installed capacity of node n for resource p. The sets C^min,C^max, and C^sch contain additional minimum, maximum and scheduling constraints, repectively.","category":"page"},{"location":"how-to/update-models/#update-models","page":"Update models","title":"Update your model to the latest versions","text":"","category":"section"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"EnergyModelsRenewableProducers is still in a pre-release version. Hence, there are frequently breaking changes occuring, although we plan to keep backwards compatibility. This document is designed to provide users with information regarding how they have to adjust their models to keep compatibility to the latest changes. We will as well implement information regarding the adjustment of extension packages, although this is more difficult due to the vast majority of potential changes.","category":"page"},{"location":"how-to/update-models/#Adjustments-from-0.4.2","page":"Update models","title":"Adjustments from 0.4.2","text":"","category":"section"},{"location":"how-to/update-models/#Key-changes-for-nodal-descriptions","page":"Update models","title":"Key changes for nodal descriptions","text":"","category":"section"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"Version 0.7 of EnergyModelsBase introduced both storage behaviours resulting in a rework of the individual approach for calculating the level balance as well as the potential to have charge and discharge capacities through storage parameters.","category":"page"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"note: Note\nThe legacy constructors for calls of the composite type of version 0.5 will be included at least until version 0.7.","category":"page"},{"location":"how-to/update-models/#[HydroStor](@ref)","page":"Update models","title":"HydroStor","text":"","category":"section"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"HydroStor was significantly reworked due to the changes in EnergyModelsBase The total rework is provided below.","category":"page"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"# The previous nodal description for a `HydroStor` node was given by:\nHydroStor(\n    id,\n    rate_cap::TimeProfile,\n    stor_cap::TimeProfile,\n\n    level_init::TimeProfile,\n    level_inflow::TimeProfile,\n    level_min::TimeProfile,\n\n    opex_var::TimeProfile,\n    opex_fixed::TimeProfile,\n    stor_res::ResourceCarrier,\n    input::Dict{<:Resource, <:Real},\n    output::Dict{<:Resource, <:Real},\n    data::Vector{Data},\n)\n\n# This translates to the following new version\nHydroStor{CyclicStrategic}(\n    id,\n    StorCapOpexFixed(stor_cap, opex_fixed),\n    StorCapOpexVar(rate_cap, opex_var),\n    level_init,\n    level_inflow,\n    level_min,\n    stor_res,\n    input,\n    output,\n    data,\n)","category":"page"},{"location":"how-to/update-models/#[PumpedHydroStor](@ref)","page":"Update models","title":"PumpedHydroStor","text":"","category":"section"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"PumpedHydroStor was significantly reworked due to the changers in EnergyModelsBase The total rework is provided below.","category":"page"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"# The previous nodal description for a `PumpedHydroStor` node was given by:\nPumpedHydroStor(\n    id,\n    rate_cap::TimeProfile,\n    stor_cap::TimeProfile,\n\n    level_init::TimeProfile,\n    level_inflow::TimeProfile,\n    level_min::TimeProfile,\n\n    opex_var::TimeProfile,\n    opex_var_pump::TimeProfile,\n    opex_fixed::TimeProfile,\n    stor_res::ResourceCarrier,\n    input::Dict{<:Resource, <:Real},\n    output::Dict{<:Resource, <:Real},\n    data::Vector{Data},\n)\n\n# This translates to the following new version\nPumpedHydroStor{CyclicStrategic}(\n    id,\n    StorCapOpexVar(rate_cap, opex_var_pump),\n    StorCapOpexFixed(stor_cap, opex_fixed),\n    StorCapOpexVar(rate_cap, opex_var),\n    level_init,\n    level_inflow,\n    level_min,\n    stor_res,\n    input,\n    output,\n    data,\n)","category":"page"},{"location":"how-to/update-models/#Adjustments-from-0.4.0-to-0.6.x","page":"Update models","title":"Adjustments from 0.4.0 to 0.6.x","text":"","category":"section"},{"location":"how-to/update-models/#Key-changes-for-nodal-descriptions-2","page":"Update models","title":"Key changes for nodal descriptions","text":"","category":"section"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"Version 0.4.1 introduced two new types that replaced the original RegHydroStor node with two types called PumpedHydroStor and HydroStor. The changes allowed for the introduction of a variable OPEX for pumping. In the translation below, it is assumed that the variable OPEX for pumping is 0.","category":"page"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"# The previous nodal description was given by:\nRegHydroStor(\n    id::Any,\n    rate_cap::TimeProfile,\n    stor_cap::TimeProfile,\n    has_pump::Bool,\n    level_init::TimeProfile,\n    level_inflow::TimeProfile,\n    level_min::TimeProfile,\n    opex_var::TimeProfile,\n    opex_fixed::TimeProfile,\n    stor_res::ResourceCarrier,\n    input,\n    output,\n    Data,\n)\n\n# This translates to the following new version if has_pump == true\nPumpedHydroStor(\n    id,\n    StorCapOpexVar(rate_cap, FixedProfile(0)),\n    StorCapOpexFixed(stor_cap, opex_fixed),\n    StorCapOpexVar(rate_cap, opex_var),\n    level_init,\n    level_inflow,\n    level_min,\n    stor_res,\n    input,\n    output,\n    Data,\n)\n# and the following version if has_pump == false\nHydroStor(\n    id,\n    StorCapOpexFixed(stor_cap, opex_fixed),\n    StorCapOpexVar(rate_cap, opex_var),\n    level_init,\n    level_inflow,\n    level_min,\n    stor_res,\n    input,\n    output,\n    Data,\n)","category":"page"},{"location":"library/internals/types-EMRP/#lib-int-types","page":"Types","title":"Types","text":"","category":"section"},{"location":"library/internals/types-EMRP/#lib-int-types-idx","page":"Types","title":"Index","text":"","category":"section"},{"location":"library/internals/types-EMRP/","page":"Types","title":"Types","text":"Pages = [\"types-EMRP.md\"]","category":"page"},{"location":"library/internals/types-EMRP/#lib-int-types-node","page":"Types","title":"Nodal supertypes","text":"","category":"section"},{"location":"library/internals/types-EMRP/","page":"Types","title":"Types","text":"EnergyModelsRenewableProducers.HydroUnit","category":"page"},{"location":"library/internals/types-EMRP/#EnergyModelsRenewableProducers.HydroUnit","page":"Types","title":"EnergyModelsRenewableProducers.HydroUnit","text":"abstract type HydroUnit <: EMB.NetworkNode\n\nA Hydropower unit node for either pumping or production, modelled as a NetworkNode node.\n\n\n\n\n\n","category":"type"},{"location":"library/internals/types-EMRP/#lib-int-types-para","page":"Types","title":"Parameter supertypes","text":"","category":"section"},{"location":"library/internals/types-EMRP/","page":"Types","title":"Types","text":"EnergyModelsRenewableProducers.AbstractScheduleType\nEnergyModelsRenewableProducers.AbstractPqCurve\nEnergyModelsRenewableProducers.AbstractBatteryLife","category":"page"},{"location":"library/internals/types-EMRP/#EnergyModelsRenewableProducers.AbstractScheduleType","page":"Types","title":"EnergyModelsRenewableProducers.AbstractScheduleType","text":"abstract type AbstractScheduleType\n\nAbstract supertype for the different constraint types.\n\n\n\n\n\n","category":"type"},{"location":"library/internals/types-EMRP/#EnergyModelsRenewableProducers.AbstractPqCurve","page":"Types","title":"EnergyModelsRenewableProducers.AbstractPqCurve","text":"abstract type AbstractPqCurve\n\nAbstractPqCurve type used to represent the relationship between discharge of water and generation of electricity.\n\n\n\n\n\n","category":"type"},{"location":"library/internals/types-EMRP/#EnergyModelsRenewableProducers.AbstractBatteryLife","page":"Types","title":"EnergyModelsRenewableProducers.AbstractBatteryLife","text":"AbstractBatteryLife\n\nAbstract supertype for the modelling of the battery lifetime of an AbstractBattery. It allows to differentiate between different degradation approaches for the storage node.\n\n\n\n\n\n","category":"type"},{"location":"nodes/det_hydropower/pump/#nodes-det_hydro_power-pump","page":"Hydro pump node","title":"Hydro pump node","text":"","category":"section"},{"location":"nodes/det_hydropower/pump/#nodes-det_hydro_power-pump-fields","page":"Hydro pump node","title":"Introduced type and its field","text":"","category":"section"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"The HydroPump node represents a hydropower unit that consumes electricity to pump water between two reservoir in a hydropower system. The HydroPump can convert electricity to potential energy stored in the reservoirs by pumping water between reservoirs at different head levels under the assumption that the reservoirs has constant head level. The conversion from electric energy is the reversed process of the energy conversion in the HydroGenerator and can be described by an power-discharge relationship, where discharge refer to the flow of pumped water.","category":"page"},{"location":"nodes/det_hydropower/pump/#nodes-det_hydro_power-pump-fields-stand","page":"Hydro pump node","title":"Standard fields","text":"","category":"section"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"HydroPump nodes build on the HydroUnit and the  RefNetworkNode  nodes, but add additional fields. The standard fields are:","category":"page"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"id:\nThe field id is only used for providing a name to the node. This is similar to the approach utilized in EnergyModelsBase.\ncap::TimeProfile:\nThe installed capacity corresponds to the nominal capacity of the node. It is the installed pumping capacity, either in form of volume water per time period or power capacity.\nopex_var::TimeProfile:\nThe variable operational expenses are based on the capacity utilization through the variable cap_use.\nopex_fixed::TimeProfile:\nThe fixed operating expenses are relative to the installed capacity (through the field cap) and the chosen duration of a strategic period as outlined on Utilize TimeStruct. It is important to note that you can only use FixedProfile or StrategicProfile for the fixed OPEX, but not RepresentativeProfile or OperationalProfile. In addition, all values have to be non-negative.\ndata::Vector{Data}:\nAn entry for providing additional data to the model.\nnote: Additional constraints\nThe data field can be used to add minimum, maximum, and schedule constraints on pumping using the general constraints types.","category":"page"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"warning: Input/output fields\nHydroGenerator nodes do not utilize the fields input and output. Instead, the input and output resources are identified from the fields water_resource and electricity_resource described below.","category":"page"},{"location":"nodes/det_hydropower/pump/#nodes-det_hydro_power-pump-fields-stand-2","page":"Hydro pump node","title":"Additional fields","text":"","category":"section"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"pq_curve::AbstractPqCurve:\nDescribes the relationship between consumed power (electricity) and pumped water. The input can be provided by using the subtype PqPoints or as a single energy equivalent.","category":"page"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"warning: pq_curve\nThe input provided to the pq_curve field has to be relative to the installed capacity, so that either the maximum discharge or the maximum power value given by the PqPoints equals 1. If a single energy equivalent is provided the cap::TimeProfile must refer to the power capacity of the HydroGenerator node.","category":"page"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"water_resource::Resource:\nThe water resource that the node pumps between reservoirs.\nelectricity_resource::Resource:\nThe electricity resource consumed in the node.","category":"page"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"note: Input/output fields\nHydroPump nodes include the fields water_resource and electricity_resource field instead of the input and output fields of RefNetworkNode. The conversion of the water resource is set to 1 since the amount of water in the system is constant. The conversion to electricity is described by the input provided in the pq_curve::AbstractPqCurve field.","category":"page"},{"location":"nodes/det_hydropower/pump/#nodes-det_hydro_power-pump-math","page":"Hydro pump node","title":"Mathematical description","text":"","category":"section"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"The HydroPump inherits its mathematical description from the HydroUnit and NetworkNode.","category":"page"},{"location":"nodes/det_hydropower/pump/#nodes-det_hydro_power-pump-math-var","page":"Hydro pump node","title":"Variables","text":"","category":"section"},{"location":"nodes/det_hydropower/pump/#nodes-det_hydro_power-pump-math-var-stand","page":"Hydro pump node","title":"Standard variables","text":"","category":"section"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"The HydroPump utilizes the standard variables from the NetworkNode, as described on the page Optimization variables.","category":"page"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"textttopex_var\ntextttopex_fixed\ntextttcap_use\ntextttcap_inst\ntextttflow_in\ntextttflow_out","category":"page"},{"location":"nodes/det_hydropower/pump/#nodes-det_hydro_power-pump-math-add","page":"Hydro pump node","title":"Additional variables","text":"","category":"section"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"In addition to the standard variables, the variables presented below are defined for HydroUnit nodes. These variabels are hence created for HydroPump nodes.","category":"page"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"textttdischarge_segmentsn t q: One discharge variable is defined for each segment q of the PQ-curve defined by the field pq_curve of node n in operational period t with unit volume per time unit.\nIf PqPoints are provided, the number of discharge segments will be Q, where Q+1 is the length of the vectors in the fields of PqPoints. There is only one discharge segment if an energy equivalent is used. The textttdischarge_segments variables define the utilisation of each discharge segment and sums up to the total discharge.\nwarning: discharge_segments\nSequential allocation is not enforced by binary variables, but will occure sequentially if the problem if set up correctly. A non-convex PQ-curve for the pump may result in a non-sequential allocation.","category":"page"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"The following variables are created if required by the additional constraints:","category":"page"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"textttgen_penalty_upn t p: Variable for penalizing violation of the maximum constraint of the resource p in direction up in HydroGenerator node n in operational period t with unit volume per time unit. Up implies in this case that the reservoir volume is larger than planned.\ntextttgen_penalty_downn t p: Variable for penalizing violation of the maximum constraint of the resource p in direction down in HydroGenerator node n in operational period t with unit volume per time unit. Down implies in this case that the reservoir volume is smaller than planned.","category":"page"},{"location":"nodes/det_hydropower/pump/#nodes-det_hydro_power-pump-math-con","page":"Hydro pump node","title":"Constraints","text":"","category":"section"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"In the following sections the vector of HydroPump nodes are omitted from the descriptions. Instead, it is implicitly assumed that the constraints are valid forall n  N for all HydroPump types if not stated differently. In addition, all constraints are valid forall t in T (that is in all operational periods) or forall t_inv in T^Inv (that is in all strategic periods).","category":"page"},{"location":"nodes/det_hydropower/pump/#nodes-det_hydro_power-pump-math-con-stand","page":"Hydro pump node","title":"Standard constraints","text":"","category":"section"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"HydroPump nodes utilize in general the standard constraints described in Constraint functions for NetworkNode. The majority of these constraints are hence ommitted in the following description.","category":"page"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"The new methods for the functions constraints_capacity and constraints_opex_var are explained in the section for HydroGenerator.","category":"page"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"Furthermore, we dispatche on the flow constraints for HydroPump nodes. The mathematical description is the same as for the HydroGenerator nodes, except that electricity flows into the node (is consumed) rather than out of the node:","category":"page"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"constraints_flow_in:\nIt is assumed that the amount of water is constant for HydroGenerator nodes, and the flow of water into the node therefore equals the flow out.\n    textttflow_inn t water_resource(n) = textttflow_outn t water_resource(n)\nThe flow of electricity into the node is given by the:\ntextttflow_inn t electricity_resource(n) = textttcap_usen t\nconstraints_flow_out:\nThe flow out of water is constrained to total discharge given by the sum of the textttdischarge_segmentsntq variables, where Q is the number of segments in the PQ-curve (i.e., Q+1 PQ-points):\ntextttflow_outn t water_resource(n) = sum_q=1^Qtextttdischarge_segmentsntq\nIn addition to being constrained by the installed capacity, the textttcap_use variables are constrained by the discharge of water multiplied with the conversion rate given by textttEq which is the slope of each segment in the PQ-curve:\ntextttcap_usen t = sum_q=1^Q(textttdischarge_segmentsntq times textttEq)\nThe discharge segments are constrained by the discharge_levels of the PqPoints:\nbeginaligned\n    textttdischarge_segmentn t q leq  capacity(n t) times (discharge_levelsq+1  \n    - discharge_levelsq) qquad forall q in 1Q \nendaligned\nThe capacity(n, t) returns the installed capacity and is used to scale the relative values of the  PqPoints to absolute values.","category":"page"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"note: Energy equivalent\nIf a single energy eqivalent is used, two points (zero and max) are created to describe a single discharge segment with the slope of the energy equivalent and the capacity of node n. In this case, the installed capacity of the node, provided in the pq_curve::AbstractPqCurve field, has to refer to the power capacity.","category":"page"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"Furthermore, the dispatch on constraints_flow_in includes additional pumping capacity constraints. The constraints are optional and only added to the problem if given as input in the Data field of the nodes. Soft constraints, i.e., constraints with a penalty, are used if the constraints have non-infinite penalty values. For HydroPump nodes, the constraints can be defined for the electricity_resource and water_resource, limiting the flow into of the node.","category":"page"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"Minimum constraints for pumping:\nbeginaligned\n  textttflow_outn t p geq  capacity(n t p) times value(c t) qquad  forall c in C^min\n  textttflow_outn t p +  textttgen_penalty_upn t p geq  \n     capacity(n t p) times value(c t) qquad  forall c in C^min \nendaligned\nMaximum constraints for pumping:\nbeginaligned\n\n  textttflow_outn t p leq  capacity(n t p) times value(c t) qquad  forall c in C^max\n  textttflow_outn t p -  textttgen_penalty_downn t p leq  \n     capacity(n t p) times value(c t) qquad  forall c in C^max \n\nendaligned\nScheduling constraints for v:\nbeginaligned\n  textttflow_outn t p =  capacity(n t p) times value(c t) qquad  forall c in C^sch\n  textttflow_outn t p +  textttgen_penalty_upn t p - textttgen_penalty_downn t =  \n  capacity(n t p) times value(c t) qquad  forall c in C^sch \nendaligned","category":"page"},{"location":"nodes/det_hydropower/pump/","page":"Hydro pump node","title":"Hydro pump node","text":"where value(ct) returns the relative limit of constraint c and  capacity(nt p) returns the installed capacity of node n for resource p. The sets C^min,C^max, and C^sch contain additional minimum, maximum and scheduling constraints, repectively.","category":"page"},{"location":"nodes/det_hydropower/gate/#nodes-det_hydro_power-gate","page":"Hydro gate node","title":"Hydro gate node","text":"","category":"section"},{"location":"nodes/det_hydropower/gate/#nodes-det_hydro_power-gate-fields","page":"Hydro gate node","title":"Introduced type and its field","text":"","category":"section"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"The HydroGate is used when water can be released between reservoirs without going through a generator. The HydroGate can either represent a controlled gate that is used to regulate the dispatch from a reservoir without production, or to bypass water when a reservoir is, for example, full. The HydroGate can also be used to represent spillage. Althoug spillage is not, in reality, a control decision but a consequence of full reservoir, it is often modelled as a controllable decisions since state dependent spillage can not be modelled directly in a linear model. Costs for operating gates can be added to penalize unwanted spillage using the field opex_var.","category":"page"},{"location":"nodes/det_hydropower/gate/#nodes-det_hydro_power-gate-fields-stand","page":"Hydro gate node","title":"Standard fields","text":"","category":"section"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"The HydroGate nodes build on the NetworkNode node type. Standard fields are given as:","category":"page"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"id:\nThe field id is only used for providing a name to the node. This is similar to the approach utilized in EnergyModelsBase.\ncap::TimeProfile:\nThe installed gate discharge capacity. In the case of a HydroGate, this value corresponds to the maximum possible discharge without any generator. In practice, this value has to be sufficiently large to avoid an unfeasible system.\nopex_var::TimeProfile:\nThe variable operational expenses are based on the capacity utilization through the variable cap_use. Hence, it is directly related to the specified output ratios. The variable operating expenses can be provided as OperationalProfile as well.\nopex_fixed::TimeProfile:\nThe fixed operating expenses are relative to the installed capacity (through the field cap) and the chosen duration of a strategic period as outlined on Utilize TimeStruct.\nIt is important to note that you can only use FixedProfile or StrategicProfile for the fixed OPEX, but not RepresentativeProfile or OperationalProfile. In addition, all values have to be non-negative.\ndata::Vector{Data}:\nAn entry for providing additional data to the model.\nnote: Additional constraints\nThe data field can be used to add minimum, maximum, and schedule constraints on the discharge using the general constraints types.","category":"page"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"warning: Input/output fields\nHydroGate nodes do not utilize the fields input and output as a hydro gate can only have one resource type, water, and the conversion is always 1 due to mass conservation.","category":"page"},{"location":"nodes/det_hydropower/gate/#nodes-det_hydro_power-gate-fields-new","page":"Hydro gate node","title":"Additional fields","text":"","category":"section"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"HydroGate nodes a single additional field:","category":"page"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"resource::Resource:\nThe water resource that the node can release.","category":"page"},{"location":"nodes/det_hydropower/gate/#nodes-det_hydro_power-gate-math","page":"Hydro gate node","title":"Mathematical description","text":"","category":"section"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"The HydroGate inherits its mathematical description from the NetworkNode where there is only a single input and output resource given by the resource field and a conversion ratio of 1.","category":"page"},{"location":"nodes/det_hydropower/gate/#nodes-det_hydro_power-gate-math-var","page":"Hydro gate node","title":"Variables","text":"","category":"section"},{"location":"nodes/det_hydropower/gate/#nodes-det_hydro_power-gate-math-var-stand","page":"Hydro gate node","title":"Standard variables","text":"","category":"section"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"The HydroGate utilizes the standard variables from the NetworkNode, as described on the page Optimization variables:","category":"page"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"textttopex_var\ntextttopex_fixed\ntextttcap_use\ntextttcap_inst\ntextttflow_in\ntextttflow_out","category":"page"},{"location":"nodes/det_hydropower/gate/#nodes-det_hydro_power-gate-math-add","page":"Hydro gate node","title":"Additional variables","text":"","category":"section"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"HydroGate nodes add additional variables if required by the additional constraints:","category":"page"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"textttgate_penalty_upn t: Variable for penalizing violation of the discharge constraint in direction up in HydroGate node n in operational period t with unit volume per time unit.\nUp implies in this case that the flow through the gate is larger than planned.\ntextttgate_penalty_downn t: Variable for penalizing violation of the discharge constraint in direction down in HydroGate node n in operational period t with unit volume per time unit.\nDown implies in this case that the flow through the gate is smaller than planned.","category":"page"},{"location":"nodes/det_hydropower/gate/#nodes-det_hydro_power-gate-math-con","page":"Hydro gate node","title":"Constraints","text":"","category":"section"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"The following sections omit the direct inclusion of the vector of HydroGate nodes. Instead, it is implicitly assumed that the constraints are valid forall n  N for all HydroGate types if not stated differently. In addition, all constraints are valid forall t in T (that is in all operational periods) or forall t_inv in T^Inv (that is in all strategic periods).","category":"page"},{"location":"nodes/det_hydropower/gate/#nodes-det_hydro_power-gate-math-con-stand","page":"Hydro gate node","title":"Standard constraints","text":"","category":"section"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"HydroGate nodes utilize in general the standard constraints described in Constraint functions for NetworkNode. The majority of these constraints are hence ommitted in the following description.","category":"page"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"The function constraints_opex_var requires a new method as we have to include the penalty variables for violating the constraints if required:","category":"page"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"beginaligned\n  textttopex_varn t_inv = \n    sum_t in t_inv Big( opex_var(n t) times textttcap_usen t +  \n    penalty(c_up t) times textttgate_penalty_upn t +  \n    penalty(c_down t) times textttgate_penalty_downn t Big) times scale_op_sp(t_inv t)\nendaligned","category":"page"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"where penalty() returns the penalty value for violation in the upward and downward direction of constraints with penalty variables, denoted by c_up and  c_up respectively.","category":"page"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"tip: The function `scale_op_sp`\nThe function scale_op_sp(t_inv t) calculates the scaling factor between operational and strategic periods. It also takes into account potential operational scenarios and their probability as well as representative periods.","category":"page"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"The method for constraints_flow_out adds discharge constraints if additional constraints are provided in the Data field. Soft constraints, i.e., constraints with a penalty, are used if the constraints have non-infinite penalty values. The mathematical formualtion of the constraints are:","category":"page"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"Minimum constraints for the discharge:\nbeginaligned\n  textttflow_outn t p geq  capacity(n t) times value(c t) qquad  forall c in C^min\n  textttflow_outn t p +  textttgate_penalty_upn t geq  \n   capacity(n t) times value(c t) qquad  forall c in C^min\nendaligned\nMaximum constraints for the discharge:\nbeginaligned\n  textttflow_outn t p leq  capacity(n t) times value(c t) qquad  forall c in C^max\n  textttflow_outn t p -  textttgate_penalty_downn t leq  \n   capacity(n t) times value(c t) qquad  forall c in C^max\nendaligned\nScheduling constraints for the discharge:\nbeginaligned\n  textttflow_outn t p =  capacity(n t) times value(c t) qquad  forall c in C^sch\n  textttflow_outn t p +  textttgate_penalty_upn t - textttgate_penalty_downn t =   \n  capacity(n t) times value(c t) quad  forall c in C^sch\nendaligned","category":"page"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"where value(ct) returns the relative limit of constraint c and  capacity(nt) returns the installed capacity of node n. The sets C^min,C^max and C^sch contain additional minimum, maximum, and scheduling constraints, repectively.","category":"page"},{"location":"nodes/det_hydropower/gate/#nodes-gate-math-con-add","page":"Hydro gate node","title":"Additional constraints","text":"","category":"section"},{"location":"nodes/det_hydropower/gate/","page":"Hydro gate node","title":"Hydro gate node","text":"The HydroGate nodes do not include any additional constraints other than through dispatching on Constraint functions for NetworkNode nodes as described above.","category":"page"},{"location":"library/internals/methods-EMRP/#lib-int-met","page":"Methods - Internal","title":"Methods - Internal","text":"","category":"section"},{"location":"library/internals/methods-EMRP/#lib-int-met-idx","page":"Methods - Internal","title":"Index","text":"","category":"section"},{"location":"library/internals/methods-EMRP/","page":"Methods - Internal","title":"Methods - Internal","text":"Pages = [\"methods-EMRP.md\"]","category":"page"},{"location":"library/internals/methods-EMRP/#lib-int-met-con","page":"Methods - Internal","title":"Constraint functions","text":"","category":"section"},{"location":"library/internals/methods-EMRP/","page":"Methods - Internal","title":"Methods - Internal","text":"EnergyModelsRenewableProducers.build_hydro_reservoir_vol_constraints\nEnergyModelsRenewableProducers.build_pq_constaints\nEnergyModelsRenewableProducers.build_schedule_constraint\nEnergyModelsRenewableProducers.constraints_usage\nEnergyModelsRenewableProducers.constraints_usage_iterate\nEnergyModelsRenewableProducers.constraints_usage_sp\nEnergyModelsRenewableProducers.constraints_reserve","category":"page"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.build_hydro_reservoir_vol_constraints","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.build_hydro_reservoir_vol_constraints","text":"build_hydro_reservoir_vol_constraints(m, n::HydroReservoir, c::ScheduleConstraint, 𝒯)\n\nCreate minimum/maximum/schedule volume constraints for a HydroReservoir node. The ScheduleConstraint{T} can have types T <: AbstractScheduleType that defines the direction of the constraint.\n\nPenalty variables are included unless the  penalty value is not set or Inf.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.build_pq_constaints","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.build_pq_constaints","text":"build_pq_constaints(m, n::HydroUnit, c::PqPoints, 𝒯::TimeStructure)\n\nFunction for creating the constraints on the variables flow_out, cap_use, and discharge_segments as declared in the PqPoints pq of a HydroUnit node.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.build_schedule_constraint","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.build_schedule_constraint","text":"build_schedule_constraint(m, n::Union{HydroGate, HydroUnit}, c::ScheduleConstraint, 𝒯::TimeStructure, p::ResourceCarrier)\n\nCreate minimum/maximum/schedule discharge constraints for the generic Node type. The ScheduleConstraint{T} can have types T <: AbstractScheduleType that defines the direction of the constraint. Penalty variables are included unless penalty value is not set or Inf`.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.constraints_usage","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.constraints_usage","text":"constraints_usage(m, n::AbstractBattery, 𝒯ᴵⁿᵛ, modeltype::EnergyModel)\n\nFunction for creating the usage constraints for an AbstractBattery. These constraints calculate the usage of the battery up to each time step for the lifetime calculations.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.constraints_usage_iterate","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.constraints_usage_iterate","text":"constraints_usage_iterate(\n    m,\n    n::AbstractBattery,\n    prev_pers::PreviousPeriods,\n    cyclic_pers::CyclicPeriods,\n    t_inv::TS.AbstractStrategicPeriod,\n    per,\n    ts::RepresentativePeriods,\n    modeltype::EnergyModel,\n)\n\nIterate through the individual time structures of an AbstractBattery node.\n\nIn the case of RepresentativePeriods, additional constraints are calculated for the usage of the battery in representative periods through introducing the variable bat_use_rp[𝒩, 𝒯ʳᵖ].\n\n\n\n\n\nIn the case of OperationalScenarios, we purely iterate through the individual time structures.\n\n\n\n\n\nIn the case of SimpleTimes, the iterator function is at its lowest level. In this situation,the previous usage is calculated using the function previous_usage. The approach for calculating the constraints is depending on the types in the parameteric type EMB.PreviousPeriods.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.constraints_usage_sp","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.constraints_usage_sp","text":"constraints_usage_sp(\n    m,\n    n::AbstractBattery,\n    prev_pers::PreviousPeriods,\n    t_inv::TS.AbstractStrategicPeriod,\n    modeltype::EnergyModel,\n)\n\nFunction for creating the constraints on the previous usage of an AbstractBattery before the beginning of a strategic period.\n\nIn the case of the first strategic period, it fixes the variable bat_prev_use_sp to 0. In all subsequent strategic periods, the previous usage is calculated.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.constraints_reserve","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.constraints_reserve","text":"constraints_reserve(m, n::AbstractBattery, 𝒯::TimeStructure, modeltype::EnergyModel)\nconstraints_reserve(m, n::ReserveBattery, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the additional constraints on the capacity utilization to account for providing reserve capacity to the system.\n\ntip: Default approach\nNo constraints are added.\n\nnote: `ReserveBattery`\nSeveral constraints are added to guarantee that the provided reserve can be delivered through the values of the variables :stor_charge_use, stor_discharge_use, and stor_level.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMRP/#lib-int-met-ident","page":"Methods - Internal","title":"Identification functions","text":"","category":"section"},{"location":"library/internals/methods-EMRP/","page":"Methods - Internal","title":"Methods - Internal","text":"EnergyModelsRenewableProducers.is_constraint_data\nEnergyModelsRenewableProducers.is_constraint_resource\nEnergyModelsRenewableProducers.is_active\nEnergyModelsRenewableProducers.has_penalty\nEnergyModelsRenewableProducers.has_penalty_up\nEnergyModelsRenewableProducers.has_penalty_down\nEnergyModelsRenewableProducers.has_degradation","category":"page"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.is_constraint_data","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.is_constraint_data","text":"is_constraint_data(data::Data)\nis_constraint_data(data::ScheduleConstraint)\n\nReturns true if Data input is of type ScheduleConstraint, otherwise false.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.is_constraint_resource","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.is_constraint_resource","text":"is_constraint_resource(data::ScheduleConstraint, resource::Resource)\n\nReturns true if Data is of type ScheduleConstraint and ScheduleConstraint resource type is resource.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.is_active","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.is_active","text":"is_active(data::ScheduleConstraint, t)\n\nReturns true if given constraint data is active at operational period t.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.has_penalty","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.has_penalty","text":"has_penalty(data::ScheduleConstraint, t)\n\nReturns true if a constraint needs a penalty variable at operational period t.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.has_penalty_up","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.has_penalty_up","text":"has_penalty_up(data::ScheduleConstraint)\nhas_penalty_up(data::ScheduleConstraint, t)\nhas_penalty_up(data::ScheduleConstraint, t, p::Resource)\n\nReturns true if a constraint data is of a type that may require a penalty up variable, which is true for MinSchedule and EqualSchedule.\n\nWhen the operational period t is provided in addition, it is furthermore necessary that the penalty is finite.\n\nWhen the operational period t and the resource p is provided in addition, it is furthermore necessary that the penalty is finite and that p corresponds to the ScheduleConstraint resource.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.has_penalty_down","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.has_penalty_down","text":"has_penalty_down(data::ScheduleConstraint)\nhas_penalty_down(data::ScheduleConstraint, t)\nhas_penalty_down(data::ScheduleConstraint, t, resource::Resource)\n\nReturns true if a constraint data is of a type that may require a penalty up down, which is true for MaxSchedule and EqualSchedule.\n\nWhen the operational period t is provided in addition, it is furthermore necessary that the penalty is finite.\n\nWhen the operational period t and the resource p is provided in addition, it is furthermore necessary that the penalty is finite and that p corresponds to the ScheduleConstraint resource.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.has_degradation","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.has_degradation","text":"has_degradation(n::AbstractBattery)\n\nReturns logic whether the AbstractBattery includes degradation of the battery and replacement options for the battery.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMRP/#lib-int-met-check","page":"Methods - Internal","title":"Check functions","text":"","category":"section"},{"location":"library/internals/methods-EMRP/","page":"Methods - Internal","title":"Methods - Internal","text":"EnergyModelsRenewableProducers.check_battery_life","category":"page"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.check_battery_life","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.check_battery_life","text":"checkbatterylife(n::AbstractBattery, batlife::AbstractBatteryLife, 𝒯, modeltype::EnergyModel, checktimeprofiles::Bool) checkbatterylife(n::AbstractBattery, batlife::CycleLife, 𝒯, modeltype::EnergyModel, checktimeprofiles::Bool)\n\nCheck that the included AbstractBatteryLife types of an AbstractBattery follows to the\n\nChecks AbstractBatteryLife\n\nNone.\n\nChecks CycleLife\n\nAll fields must be positive.\nThe value of the field degradation must be smaller than 1.\nThe value of the field stack_cost is required to be accessible through a StrategicPeriod as outlined in the function EMB.check_fixed_opex.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMRP/#lib-int-met-util","page":"Methods - Internal","title":"Utility functions","text":"","category":"section"},{"location":"library/internals/methods-EMRP/","page":"Methods - Internal","title":"Methods - Internal","text":"EnergyModelsRenewableProducers.capacity_max\nEnergyModelsRenewableProducers.linear_reformulation\nEnergyModelsRenewableProducers.multiplication_variables\nEnergyModelsRenewableProducers.previous_usage\nEnergyModelsRenewableProducers.capacity_reduction\nEnergyModelsRenewableProducers.replace_disjunct","category":"page"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.capacity_max","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.capacity_max","text":"capacity_max(n::AbstractBattery, t_inv, modeltype::EnergyModel)\n\nFunction for calculating the maximum capacity, including the number of cycles.\n\nmodeltype::EnergyModel\n\nWhen the modeltype is an EnergyModel, it returns the muliplication of the installed storage level capacity and the number of cycles before the stack must be replaced.\n\nmodeltype::AbstractInvestmentModel\n\nWhen the modeltype is an AbstractInvestmentModel, it returns the muliplication of the maximum installed storage level capacity and the number of cycles before the stack must be replaced.\n\nnote: Note\nIf the AbstractBattery node does not have investments, it reuses the default function.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.linear_reformulation","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.linear_reformulation","text":"linear_reformulation(\n    m,\n    𝒯,\n    var_binary,\n    var_continuous,\n    lb::TimeProfile,\n    ub::TimeProfile,\n)\n\nLinear reformulation of the element-wise multiplication of the binary variable var_binary[𝒯] and the continuous variable var_continuous[𝒯] ∈ [ub, lb].\n\nIt returns the product var_aux[𝒯] with\n\nvar_auxt = var_binaryt times var_continuoust.\n\nnote: Note\nThe bounds lb and ub must have the ability to access their fields using the iterator of 𝒯, that is if 𝒯 corresponds to the strategic periods, it is not possible to provide an OperationalProfile or RepresentativeProfile.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.multiplication_variables","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.multiplication_variables","text":"multiplication_variables(\n    m,\n    n::AbstractBattery,\n    𝒯ᴵⁿᵛ,\n    modeltype::EnergyModel\n)\n\nFunction for calculating the muliplication of the capacity of an AbstractBattery and the binary variable :bat_stack_replace_b.\n\nmodeltype::EnergyModel\n\nMultiplication of the installed capacity (expressed through capacity(level(n), t_inv)) and the binary variable bat_stack_replace_b in a strategic period t_inv.\n\nReturns\n\nprod[t]: Multiplication of capacity(level(n), t_inv) and bat_stack_replace_b[n, t_inv].\n\nmodeltype::AbstractInvestmentModel\n\nWhen the modeltype is an AbstractInvestmentModel, then the function applies a linear reformulation of the binary-continuous multiplication based on the McCormick relaxation and the function linear_reformulation.\n\nnote: Note\nIf the AbstractBattery node does not have investments, it reuses the default function to avoid increasing the number of variables in the model.\n\nReturns\n\nprod[t]: Multiplication of cap_inst[n, t] and var_b[t] or alternatively cap_current[n, t] and var_b[t], if the TimeStructure is a StrategicPeriods and the node n has investments.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.previous_usage","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.previous_usage","text":"previous_usage(\n    m,\n    n::AbstractBattery,\n    t_inv::TS.AbstractStrategicPeriod,\n    prev_pers::PreviousPeriods,\n    modeltype::EnergyModel,\n)\n\nReturns the previous usage of an AbstractBattery node depending on the type of PreviousPeriods.\n\nThe basic functionality is used in the case when the previous operational period is a TimePeriod, in which case it just returns the previous operational period.\n\n\n\n\n\nWhen the previous operational and representative periods are Nothing, the variable bat_prev_use_sp is used for the initial usage in a strategic period\n\n\n\n\n\nWhen the previous operational period is Nothing and the previous representative period an AbstractRepresentativePeriod then the time structure does include RepresentativePeriods.\n\nThe constraint then sums up the values from the previous representative period.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.capacity_reduction","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.capacity_reduction","text":"capacity_reduction(\n    m,\n    n::AbstractBattery,\n    bat_life::AbstractBatteryLife,\n    𝒯::TimeStructure,\n    modeltype::EnergyModel,\n)\n\nReturns the reduction in the storage capacity of an AbstractBattery depending once on the chosen AbstractBatteryLife.\n\ntip: Default approach\nReturns a value of 0 indicating no reduction in storage capacity.\n\nnote: `CycleLife`\nReturns the reduction in storage level capacity as linear multiplier of the charge usage of the Battery through the fields cycles and degradation of the CycleLife.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMRP/#EnergyModelsRenewableProducers.replace_disjunct","page":"Methods - Internal","title":"EnergyModelsRenewableProducers.replace_disjunct","text":"replace_disjunct(\n    m,\n    n::AbstractBattery,\n    bat_life::AbstractBatteryLife,\n    prev_pers::PreviousPeriods,\n    t_inv::TS.AbstractStrategicPeriod,\n    modeltype::EnergyModel,\n)\n\nFunction for dispatching no the different type of battery lifes for incorporation of the preivous usage constraints in the first operational period (of the first representative period) of a strategic period.\n\ntip: Default approach\nReturns the value based on the the calculation of the previous usage in the previous strategic period and the initial value in the previous strategic period.\n\nnote: `CycleLife`\nIn the case of a cycle life, it takes into account the potential for battery stack replacement through a bilinear formulation. The bilinear formulation is simplifed due to the known lower bounds.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#lib-int-met_field","page":"Methods - Accessing fields","title":"Methods - Accessing fields","text":"","category":"section"},{"location":"library/internals/methods-fields/#lib-int-met_field-idx","page":"Methods - Accessing fields","title":"Index","text":"","category":"section"},{"location":"library/internals/methods-fields/","page":"Methods - Accessing fields","title":"Methods - Accessing fields","text":"Pages = [\"methods-fields.md\"]","category":"page"},{"location":"library/internals/methods-fields/#lib-int-met_field-node","page":"Methods - Accessing fields","title":"Node","text":"","category":"section"},{"location":"library/internals/methods-fields/","page":"Methods - Accessing fields","title":"Methods - Accessing fields","text":"EnergyModelsRenewableProducers.constraint_data","category":"page"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.constraint_data","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.constraint_data","text":"constraint_data(n::EMB.Node)\n\nReturns vector of Data that are of type ScheduleConstraint.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#lib-int-met_field-nondisres","page":"Methods - Accessing fields","title":"NonDisRES","text":"","category":"section"},{"location":"library/internals/methods-fields/","page":"Methods - Accessing fields","title":"Methods - Accessing fields","text":"EnergyModelsRenewableProducers.profile","category":"page"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.profile","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.profile","text":"profile(n::AbstractNonDisRES)\nprofile(n::AbstractNonDisRES, t)\n\nReturns the profile of a node n of type AbstractNonDisRES either as TimeProfile or in operational period t.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#lib-int-met_field-hydrostorage","page":"Methods - Accessing fields","title":"HydroStorage","text":"","category":"section"},{"location":"library/internals/methods-fields/","page":"Methods - Accessing fields","title":"Methods - Accessing fields","text":"EnergyModelsRenewableProducers.level_init\nEnergyModelsRenewableProducers.level_inflow\nEnergyModelsRenewableProducers.level_min","category":"page"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.level_init","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.level_init","text":"level_init(n::HydroStorage)\nlevel_init(n::HydroStorage, t)\n\nReturns the initial level of a node n of type HydroStorage either as TimeProfile or in operational period t.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.level_inflow","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.level_inflow","text":"level_inflow(n::HydroStorage)\nlevel_inflow(n::HydroStorage, t)\n\nReturns the inflow to a node n of type HydroStorage either as TimeProfile or in operational period t.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.level_min","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.level_min","text":"level_min(n::HydroStorage)\nlevel_min(n::HydroStorage, t)\n\nReturns the minimum level of a node n of type HydroStorage either as TimeProfile or in operational period t.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#lib-int-met_field-pumpedhydrostor","page":"Methods - Accessing fields","title":"PumpedHydroStor","text":"","category":"section"},{"location":"library/internals/methods-fields/","page":"Methods - Accessing fields","title":"Methods - Accessing fields","text":"EnergyModelsRenewableProducers.opex_var_pump","category":"page"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.opex_var_pump","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.opex_var_pump","text":"opex_var_pump(n::PumpedHydroStor)\nopex_var_pump(n::PumpedHydroStor, t)\n\nReturns the variable OPEX of a node n of type PumpedHydroStor related to pumping either as TimeProfile or in operational period t.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#lib-int-met_field-hydroreservoir","page":"Methods - Accessing fields","title":"HydroReservoir","text":"","category":"section"},{"location":"library/internals/methods-fields/","page":"Methods - Accessing fields","title":"Methods - Accessing fields","text":"EnergyModelsRenewableProducers.max_normalized_power\nEnergyModelsRenewableProducers.max_normalized_flow\nEnergyModelsRenewableProducers.vol_inflow","category":"page"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.max_normalized_power","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.max_normalized_power","text":"max_normalized_power(n::HydroUnit)\n\nReturns the maximum power as a fraction of the capacity of HydroUnit n based on the pq_curve input.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.max_normalized_flow","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.max_normalized_flow","text":"max_normalized_flow(n::HydroUnit)\n\nReturns the maximum flow as a fraction of the capacity of HydroUnit n based on the pq_curve input.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.vol_inflow","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.vol_inflow","text":"vol_inflow(n::HydroReservoir)\nvol_inflow(n::HydroReservoir, t)\n\nReturns the inflow to a HydroReservoir n either as TimeProfile or in operational period t.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#lib-int-met_field-hydrounit","page":"Methods - Accessing fields","title":"HydroUnit","text":"","category":"section"},{"location":"library/internals/methods-fields/","page":"Methods - Accessing fields","title":"Methods - Accessing fields","text":"EnergyModelsRenewableProducers.pq_curve\nEnergyModelsRenewableProducers.water_resource\nEnergyModelsRenewableProducers.electricity_resource","category":"page"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.pq_curve","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.pq_curve","text":"pq_curve(n::HydroUnit)\n\nReturns the resources in the PQ-curve of a HydroUnit n.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.water_resource","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.water_resource","text":"water_resource(n::HydroUnit)\n\nReturns the resource of the water_resource field of a HydroUnit n.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.electricity_resource","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.electricity_resource","text":"electricity_resource(n::HydroUnit)\n\nReturns the resource of the electricity_resource field of a HydroUnit n.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#lib-int-met_field-bat","page":"Methods - Accessing fields","title":"Battery fields","text":"","category":"section"},{"location":"library/internals/methods-fields/","page":"Methods - Accessing fields","title":"Methods - Accessing fields","text":"EnergyModelsRenewableProducers.battery_life\nEnergyModelsRenewableProducers.cycles\nEnergyModelsRenewableProducers.degradation\nEnergyModelsRenewableProducers.stack_cost\nEnergyModelsRenewableProducers.reserve_up\nEnergyModelsRenewableProducers.reserve_down","category":"page"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.battery_life","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.battery_life","text":"battery_life(n::AbstractBattery)\n\nReturns the AbstractBatteryLife type of AbstractBattery n.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.cycles","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.cycles","text":"cycles(n::AbstractBattery)\n\nReturns the maximum number of cycles of AbstractBattery n through calling its subfunction. If the battery_life is an AbstractBatteryLife, it will return nothing.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.degradation","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.degradation","text":"degradation(n::AbstractBattery)\n\nReturns the degradation of the battery storage capacity at the end of its lifetime through calling its subfunction. If the battery_life is an AbstractBatteryLife, it will return nothing.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.stack_cost","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.stack_cost","text":"stack_cost(n::AbstractBattery)\nstack_cost(n::AbstractBattery, t_inv::TS.AbstractStrategicPeriod)\n\nReturns the relative stack cost of the battery storage capacity for replacing the existing battery capacity as TimeProfile or in strategic period t_inv.\n\nIf the battery_life is an AbstractBatteryLife, it will return nothing.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.reserve_up","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.reserve_up","text":"reserve_up(n::ReserveBattery)\n\nReturns the instances used as reserve resources for adding capacity to the energy system.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.reserve_down","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.reserve_down","text":"reserve_down(n::ReserveBattery)\n\nReturns the instances used as reserve resources for removing capacity from the energy system.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#lib-int-met_field-scheduling","page":"Methods - Accessing fields","title":"Scheduling constraints","text":"","category":"section"},{"location":"library/internals/methods-fields/","page":"Methods - Accessing fields","title":"Methods - Accessing fields","text":"EnergyModelsRenewableProducers.resource\nEnergyModelsRenewableProducers.value\nEnergyModelsRenewableProducers.penalty","category":"page"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.resource","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.resource","text":"resource(data::ScheduleConstraint)\n\nReturns the Resource type of a ScheduleConstraint.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.value","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.value","text":"value(data::ScheduleConstraint, t)\n\nReturns the value of a constraint data at operational period t.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.penalty","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.penalty","text":"penalty(data::ScheduleConstraint, t)\n\nReturns the penalty value of constraint data at operational period t.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#lib-int-met_fieldpqpoints","page":"Methods - Accessing fields","title":"PqPoints","text":"","category":"section"},{"location":"library/internals/methods-fields/","page":"Methods - Accessing fields","title":"Methods - Accessing fields","text":"EnergyModelsRenewableProducers.discharge_segments\nEnergyModelsRenewableProducers.discharge_level\nEnergyModelsRenewableProducers.power_level","category":"page"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.discharge_segments","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.discharge_segments","text":"discharge_segments(pq_curve::PqPoints)\n\nReturns the range of segment indices for a PqPoints pq_curve.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.discharge_level","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.discharge_level","text":"discharge_level(pq::PqPoints)\ndischarge_level(pq::PqPoints, i)\n\nReturns the discharge level of PqPoint pq as array or at index i.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsRenewableProducers.power_level","page":"Methods - Accessing fields","title":"EnergyModelsRenewableProducers.power_level","text":"power_level(pq::PqPoints)\npower_level(pq::PqPoints, i)\n\nReturns the power level of PqPoint pq as array or at index i.\n\n\n\n\n\n","category":"function"},{"location":"manual/NEWS/#Release-notes","page":"Release notes","title":"Release notes","text":"","category":"section"},{"location":"manual/NEWS/#Version-0.6.5-(2025-02-10)","page":"Release notes","title":"Version 0.6.5 (2025-02-10)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjusted to EnergyModelsBase v0.9.0:\nIncreased version nubmer for EMB.\nModel worked without adjustments.\nAdjustments only required for simple understanding of changes.","category":"page"},{"location":"manual/NEWS/#Version-0.6.4-(2024-11-29)","page":"Release notes","title":"Version 0.6.4 (2024-11-29)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Fixed errors overseen from the inclusion of batteries and detailed hydropower.\nExtended on tests to avoid errors like these in the future.\nProvided a comprehensive testset for checks.","category":"page"},{"location":"manual/NEWS/#Version-0.6.3-(2024-11-27)","page":"Release notes","title":"Version 0.6.3 (2024-11-27)","text":"","category":"section"},{"location":"manual/NEWS/#Battery-modelling","page":"Release notes","title":"Battery modelling","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Introduced two different battery nodes.\nBoth nodes utilize charge and discharge efficiencies as well as potential for battery stack degradation.\nBattery nodes:\nSimplified version.\nIncludes all standard battery behaviors.\nReserveBattery nodes:\nExtends Battery with the potential for specifying a reserve that the battery can supply.\nReserve can be both upwards and downwards, that is providing capacity to the system and use surplus capacity from the system through charging.","category":"page"},{"location":"manual/NEWS/#Detailed-hydropower-modelling","page":"Release notes","title":"Detailed hydropower modelling","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Introduced a detailed modelling of hydro power utilizing multiple nodes and PQ-curves.\nAll nodes can handle ScheduleConstraints for providing hard or soft bounds on production/stored volume.\nHydroreservoir nodes:\nStorage nodes that do not require a large amount of input.\nUtilize water volumes as stored energy.\nHydroGate nodes:\nCan server as a spillover from a reservoir to another.\nCan still provide a limited capacity and fixed OPEX for maintaining them.\nHydroGenerator nodes:\nConnects multiple reservoirs.\nCan take in water from multiple reservoirs.\nUtilize concave PQ-curves for the calculation of power generation.\nHydroPump nodes:\nCan pump water to a higher level.\nUtilizes convex PQ-curves for the calculation of power requirement for pumping.","category":"page"},{"location":"manual/NEWS/#Version-0.6.2-(2024-10-16)","page":"Release notes","title":"Version 0.6.2 (2024-10-16)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Minor updates on docstrings and descriptions.\nAdjusted to EnergyModelsBase v0.8.1.\nIntroduced abstract supertype AbstractNonDisRES for NonDisRES to allow for other implementations that use as well the variable curtailment.","category":"page"},{"location":"manual/NEWS/#Version-0.6.1-(2024-09-03)","page":"Release notes","title":"Version 0.6.1 (2024-09-03)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Dependency increase for EnergyModelsBase as the changes do not directly affect EnergyModelsCO2.\nUpdated the documentation using the new structure released by EnergyModelsCO2.\nIncluded the package DocumenterInterLinks for crossreferences to EnergyModelsBase.\nUse dev version of EMRP for examples when running as part of tests, similar to PR #33 of EMB.","category":"page"},{"location":"manual/NEWS/#Version-0.6.0-(2024-05-28)","page":"Release notes","title":"Version 0.6.0 (2024-05-28)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjusted to changes introduced in EnergyModelsBase v0.7.\nRemove legacy constructor for RegHydroStor and provide a warning for it.\nAdded constructors for HydroStor not requiring any longer specifying an input dictionary.","category":"page"},{"location":"manual/NEWS/#Version-0.5.6-(2024-05-09)","page":"Release notes","title":"Version 0.5.6 (2024-05-09)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Provided a contribution section in the documentation.\nFixed a link in the documentation for the examples.","category":"page"},{"location":"manual/NEWS/#Version-0.5.5-(2024-03-21)","page":"Release notes","title":"Version 0.5.5 (2024-03-21)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Minor changes to the checks to be consistent with EnergyModelsBase v0.6.7.","category":"page"},{"location":"manual/NEWS/#Version-0.5.4-(2024-03-04)","page":"Release notes","title":"Version 0.5.4 (2024-03-04)","text":"","category":"section"},{"location":"manual/NEWS/#Examples","page":"Release notes","title":"Examples","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Fixed a bug when running the examples from a non-cloned version of EnergyModelsRenewableProducers.\nThis was achieved through a separate Project.toml in the examples.","category":"page"},{"location":"manual/NEWS/#NonDIsRes-node","page":"Release notes","title":"NonDIsRes node","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Moved the capacity constraints through the profile to the function EMB.constraints_capacity(n::NonDisRES, ...), and hence, removed the function EMB.create_node(n::NonDisRES, ...).","category":"page"},{"location":"manual/NEWS/#Minor-updates","page":"Release notes","title":"Minor updates","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Added some checks and tests to the checks.\nRestructured the test folder.","category":"page"},{"location":"manual/NEWS/#Version-0.5.3-(2024-01-30)","page":"Release notes","title":"Version 0.5.3 (2024-01-30)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Updated the restrictions on the fields of individual types to be consistent.\nAdded option to not include the field data for the individual introduced Nodes.","category":"page"},{"location":"manual/NEWS/#Version-0.5.2-(2024-01-19)","page":"Release notes","title":"Version 0.5.2 (2024-01-19)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Updated the documenation to be in line with the updated done in EnergyModelsBsae.\nMoved RegHydroStor to a new file, legacy_constructors.jl to highlight that a user should use the new types, namely HydroStor and PumpedHydroStor.","category":"page"},{"location":"manual/NEWS/#Version-0.5.1-(2024-01-17)","page":"Release notes","title":"Version 0.5.1 (2024-01-17)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Update the method constraints_level to match the signature updates for these methods in EnergyModelsBase. This includes renaming constraints_level to constraints_level_sp.\nMoved the function to EMB.constraints_level_sp to avoid problems.","category":"page"},{"location":"manual/NEWS/#Version-0.5.0-(2023-12-18)","page":"Release notes","title":"Version 0.5.0 (2023-12-18)","text":"","category":"section"},{"location":"manual/NEWS/#Adjustment-to-release-in-EMB-0.6.0","page":"Release notes","title":"Adjustment to release in EMB 0.6.0","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjusted the code for the new release.\nImplementation of support for RepresentativePeriods for HydroStorage nodes.","category":"page"},{"location":"manual/NEWS/#Version-0.4.2-(2023-09-01)","page":"Release notes","title":"Version 0.4.2 (2023-09-01)","text":"","category":"section"},{"location":"manual/NEWS/#Create-a-variable-:spill-for-hydro-storage-node","page":"Release notes","title":"Create a variable :spill for hydro storage node","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"This variable enables hydro storage nodes to spill water from the reservoir without producing energy.","category":"page"},{"location":"manual/NEWS/#Version-0.4.1-(2023-08-31)","page":"Release notes","title":"Version 0.4.1 (2023-08-31)","text":"","category":"section"},{"location":"manual/NEWS/#Split-the-hydro-storage-node-into-to-separate-nodes","page":"Release notes","title":"Split the hydro storage node into to separate nodes","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Split RegHydroStor into to types PumpedHydroStor and HydroStor. Both are subtypes","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"of the new abstract type HydroStorage <: EMB.Storage.","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Fix: variational OPEX for HydroStor now depends on flow_out instead of","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"flow_in. The new type PumpedHydroStor has a separate parameter for variational OPEX  for the pumps, which depends on flow_in.","category":"page"},{"location":"manual/NEWS/#Version-0.4.0-(2023-06-06)","page":"Release notes","title":"Version 0.4.0 (2023-06-06)","text":"","category":"section"},{"location":"manual/NEWS/#Switch-to-TimeStruct","page":"Release notes","title":"Switch to TimeStruct","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Switched the time structure representation to TimeStruct.\nTimeStruct is implemented with only the basis features that were available in TimeStructures. This implies that neither operational nor strategic uncertainty is included in the model.","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Version 0.3.0 (2023-05-30)","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjustment to changes in EnergyModelsBase v0.4.0 related to extra input data.","category":"page"},{"location":"manual/NEWS/#Version-0.2.2-(2023-05-15)","page":"Release notes","title":"Version 0.2.2 (2023-05-15)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjustment to changes in EnergyModelsBase v 0.3.3 related to the calls for the constraint functions.","category":"page"},{"location":"manual/NEWS/#Version-0.2.1-(2023-02-03)","page":"Release notes","title":"Version 0.2.1 (2023-02-03)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Take the examples out to the folder examples.","category":"page"},{"location":"manual/NEWS/#Version-0.2.0-(2023-02-03)","page":"Release notes","title":"Version 0.2.0 (2023-02-03)","text":"","category":"section"},{"location":"manual/NEWS/#Adjustmends-to-updates-in-EnergyModelsBase","page":"Release notes","title":"Adjustmends to updates in EnergyModelsBase","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjustment to version 0.3.0, namely:","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Changed type (Node) calls in tests to be consistent with version 0.3.0.\nRemoval of the type GlobalData and replacement with fields in the type OperationalModel in all tests.\nChanged type structure to be consistent with EMB version 0.3.0.\nSubstitution of certain constraints in create_node through functions which utilize dispatching on node types.\nChanged the input to the function variables_node.","category":"page"},{"location":"manual/NEWS/#Version-0.1.3-(2022-12-12)","page":"Release notes","title":"Version 0.1.3 (2022-12-12)","text":"","category":"section"},{"location":"manual/NEWS/#Internal-release","page":"Release notes","title":"Internal release","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Renamed to follow common prefix naming scheme.\nUpdate README.","category":"page"},{"location":"manual/NEWS/#Version-0.1.2-(2022-12-02)","page":"Release notes","title":"Version 0.1.2 (2022-12-02)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Minor test fixes in preparation of internal release.","category":"page"},{"location":"manual/NEWS/#Version-0.1.1-(2021-09-07)","page":"Release notes","title":"Version 0.1.1 (2021-09-07)","text":"","category":"section"},{"location":"manual/NEWS/#Changes-in-naming","page":"Release notes","title":"Changes in naming","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Major changes in both variable and parameter naming, check the commit message for an overview.\nChange of structure in composite type \"RegHydroStor\".","category":"page"},{"location":"manual/NEWS/#Version-0.1.0-(2021-08-23)","page":"Release notes","title":"Version 0.1.0 (2021-08-23)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Initial version with inclusion of nodes for:\nnondispatchable renewable energy sources (NonDisRES) and\nregulated hydro generation (RegHydroStor, can be used for pumped hydro storage).","category":"page"},{"location":"#EnergyModelsRenewableProducers","page":"Home","title":"EnergyModelsRenewableProducers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This Julia package implements new nodes with corresponding JuMP variables and constraints, extending the package EnergyModelsBase with more detailed representation of renewable energy sources.","category":"page"},{"location":"","page":"Home","title":"Home","text":"These nodes are","category":"page"},{"location":"","page":"Home","title":"Home","text":"a Source node NonDisRES,\na Storage node (HydroStor),\na Storage node (PumpedHydroStor),\na Storage node (HydroReservoir),\na NetworkNode node (HydroGenerator),\na NetworkNode node (HydroPump),\na NetworkNode node (HydroGate).\na Storage node (Battery), and\na Storage node (ReserveBattery).","category":"page"},{"location":"","page":"Home","title":"Home","text":"The new introduced node types are also documented in the public library as well as the corresponding nodal page.","category":"page"},{"location":"#Developed-nodes","page":"Home","title":"Developed nodes","text":"","category":"section"},{"location":"#[NonDisRES](@ref)","page":"Home","title":"NonDisRES","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The first node models a non-dispatchable renewable energy source, like wind power, solar power, or run of river hydropower. These all use intermittent energy sources in the production of energy, so the maximum production capacity varies with the availability of the energy source at the time.","category":"page"},{"location":"#Simple-hydropower","page":"Home","title":"Simple hydropower","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The PumpedHydroStor and HydroStor nodes implement a regulated hydropower storage plant, either with or without pumps for filling the reservoir with excess energy. These nodes can be used to model a single hydropower plant and reservoir, or to model an aggregated description of a hydropower system. The nodes do not include conversion from water to energy, and therby requires an energy-based descriton of the hydropower system. The hydropower storage plant can also be extended as they are declared as subtypes of HydroStorage.","category":"page"},{"location":"#Detailed-hydropower","page":"Home","title":"Detailed hydropower","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Cascaded hydropower systems can be modelled usind the HydroReservoir, HydroGate, HydroGenerator, and HydroPump nodes. These nodes can be used in combination to model a detailed hydropower system. Unlike HydroStorage nodes, these nodes allow for modelling of water as a resource that can be stored in reservoirs and moved between reservoirs to generate/consume electricity. The HydroReservoir node is a storage node used for storing water, while HydroGenerator, HydroPump and HydroGate nodes move water around in the system. HydroGenerator and HydroPump nodes convert potential energy to electric energy and vice versa.","category":"page"},{"location":"#Batteries","page":"Home","title":"Batteries","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Batteries can be modelled through both Battery and ReserveBattery Battery nodes allow for charge and discharge efficiencies as well as storage capacity degradation, if desired. ReserveBattery nodes include in addition a first implementation of the concept of capacity reserves within EnergyModelsX. A demand for reserve capacity can be implemented through a corresponding sink with penalties.","category":"page"},{"location":"#Manual-outline","page":"Home","title":"Manual outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"manual/quick-start.md\",\n    \"manual/simple-example.md\",\n    \"manual/NEWS.md\",\n]\nDepth = 1","category":"page"},{"location":"#Description-of-the-nodes","page":"Home","title":"Description of the nodes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"nodes/nondisres.md\",\n    \"nodes/hydropower.md\",\n    \"nodes/det_hydropower/description.md\",\n    \"nodes/det_hydropower/reservoir.md\",\n    \"nodes/det_hydropower/generator.md\",\n    \"nodes/det_hydropower/pump.md\",\n    \"nodes/det_hydropower/gate.md\",\n    \"nodes/battery.md\",\n]\nDepth = 1","category":"page"},{"location":"#How-to-guides","page":"Home","title":"How to guides","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"how-to/contribute.md\",\n    \"how-to/update-models.md\",\n]\nDepth = 1","category":"page"},{"location":"#Library-outline","page":"Home","title":"Library outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"library/public.md\",\n    \"library/internals/types-EMRP.md\",\n    \"library/internals/methods-fields.md\",\n    \"library/internals/methods-EMRP.md\",\n    \"library/internals/methods-EMB.md\",\n]\nDepth = 1","category":"page"},{"location":"library/public/#lib-pub","page":"Public","title":"Public interface","text":"","category":"section"},{"location":"library/public/#lib-pub-module","page":"Public","title":"Module","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"EnergyModelsRenewableProducers","category":"page"},{"location":"library/public/#EnergyModelsRenewableProducers","page":"Public","title":"EnergyModelsRenewableProducers","text":"Main module for EnergyModelsRenewableProducers.jl.\n\nThis module implements the following types (Nodes) with constraints:\n\nNonDisRes is a subtype of Source and represents a non-dispatchable renewable producer, as wind, solar etc.\nPumpedHydroStor is a subtype of Storage and represents a regulated pumped hydro storage.\nHydroStor is a subtype of Storage and represents a regulated hydro storage, that is a standard hydro powerplant without pumps.\nHydroReservoir is a subtype of Storage and represents a hydro storage for cascaded hydro power systems.\nHydroGenerator is a subtype of Network and represents a hydro generator for cascaded hydro power systems.\nHydroPump is a subtype of Network and represents a hydro pump for cascaded hydro power systems.\nHydroGate is a subtype of Network and represents a gate for cascaded hydro power systems.\n\n\n\n\n\n","category":"module"},{"location":"library/public/#lib-pub-node","page":"Public","title":"Node types","text":"","category":"section"},{"location":"library/public/#lib-pub-node-abstract","page":"Public","title":"Abstract types","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"HydroStorage\nAbstractNonDisRES\nAbstractBattery","category":"page"},{"location":"library/public/#EnergyModelsRenewableProducers.HydroStorage","page":"Public","title":"EnergyModelsRenewableProducers.HydroStorage","text":"An abstract type for hydro storage nodes, with or without pumping. \n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsRenewableProducers.AbstractNonDisRES","page":"Public","title":"EnergyModelsRenewableProducers.AbstractNonDisRES","text":"abstract type AbstractNonDisRES <: EMB.Source\n\nAbstract supertype for all non-dispatchable renewable energy source. All functions for the implemented version of the NonDisRES are dispatching on this supertype.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsRenewableProducers.AbstractBattery","page":"Public","title":"EnergyModelsRenewableProducers.AbstractBattery","text":"AbstractBattery{T} <: EMB.Storage{T}\n\nAbstract supertype for the different battery storage models.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#lib-pub-node-concrete","page":"Public","title":"Concrete types","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Battery\nReserveBattery\nNonDisRES\nHydroStor\nPumpedHydroStor\nHydroReservoir\nHydroGenerator\nHydroPump\nHydroGate","category":"page"},{"location":"library/public/#EnergyModelsRenewableProducers.Battery","page":"Public","title":"EnergyModelsRenewableProducers.Battery","text":"Battery{T} <: AbstractBattery{T}\n\nA battery storage, modelled as a Storage node. A battery storage nodes differs from a RefStorage node through:\n\nincorporating a discharge capacity,\nincluding charge and discharge efficiencies, and\nallow for the introduction of battery degradation and lifetime reduction.\n\nwarning: Implementation details\nThe discharge and charge capacities are independent of each other.\nThe values for the charge and discharge efficiencies must be smaller than 1.\n\nFields\n\nid is the name/identifyer of the node.\ncharge::EMB.UnionCapacity are the charging parameters of the BatteryStorage node. Depending on the chosen type, the charge parameters can include variable OPEX, fixed OPEX, and/or a capacity.\nlevel::EMB.UnionCapacity are the level parameters of the BatteryStorage node. Depending on the chosen type, the charge parameters can include variable OPEX and/or fixed OPEX.\ndischarge::EMB.UnionCapacity are the discharging parameters of the BatteryStorage node. Depending on the chosen type, the discharge parameters can include variable OPEX, fixed OPEX, and/or a capacity.\nstor_res::ResourceCarrier is the stored Resource.\ninput::Dict{Resource, Real} are the input Resources with corresponding efficiency value.\noutput::Dict{Resource, Real} are the output Resources with corresponding efficiency value.\nbattery_life::AbstractBatteryLife is used for calculating the maximum battery lifetime and corresponding degradation of the Battery.\ndata::Vector{Data} additional data (e.g., for investments). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsRenewableProducers.ReserveBattery","page":"Public","title":"EnergyModelsRenewableProducers.ReserveBattery","text":"ReserveBattery{T} <: AbstractBattery{T}\n\nA reserve battery storage, modelled as a Storage node. A battery storage nodes differs from a Battery node through allowing for the introduction of both upwards and downwards reserves.\n\nwarning: Implementation details\nThe discharge and charge capacities are independent of each other.\nThe values for the charge and discharge efficiencies must be smaller than 1.\nThe upwards and downwards reserves are implemented as resources leaving the battery. It is hence important to also provide a potential sink which determines the total reserve required in the system.\n\nFields\n\nid is the name/identifyer of the node.\ncharge::EMB.UnionCapacity are the charging parameters of the BatteryStorage node. Depending on the chosen type, the charge parameters can include variable OPEX, fixed OPEX, and/or a capacity.\nlevel::EMB.UnionCapacity are the level parameters of the BatteryStorage node. Depending on the chosen type, the charge parameters can include variable OPEX and/or fixed OPEX.\ndischarge::EMB.UnionCapacity are the discharging parameters of the BatteryStorage node. Depending on the chosen type, the discharge parameters can include variable OPEX, fixed OPEX, and/or a capacity.\nstor_res::ResourceCarrier is the stored Resource.\ninput::Dict{Resource, Real} are the input Resources with corresponding efficiency value.\noutput::Dict{Resource, Real} are the output Resources with corresponding efficiency value.\nbattery_life::AbstractBatteryLife is used for calculating the maximum battery lifetime and corresponding degradation of the Battery.\nreserve_up::Vector{ResourceCarrier} are the Resources used as reserve for providing energy to the system.\nreserve_down::Vector{ResourceCarrier} are the Resources used as reserve for removing energy from the system.\ndata::Vector{Data} additional data (e.g., for investments). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsRenewableProducers.NonDisRES","page":"Public","title":"EnergyModelsRenewableProducers.NonDisRES","text":"NonDisRES <: AbstractNonDisRES\n\nA non-dispatchable renewable energy source. It extends the existing RefSource node through including a profile that corresponds to the production. The profile can have variations on the strategic level.\n\nFields\n\nid is the name/identifyer of the node.\ncap::TimeProfile is the installed capacity.\nprofile::TimeProfile is the power production in each operational period as a ratio of the installed capacity at that time.\nopex_var::TimeProfile is the variable operating expense per energy unit produced.\nopex_fixed::TimeProfile is the fixed operating expense.\noutput::Dict{Resource, Real} are the generated Resources, normally Power.\ndata::Vector{Data} is the additional data (e.g. for investments). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsRenewableProducers.HydroStor","page":"Public","title":"EnergyModelsRenewableProducers.HydroStor","text":"HydroStor{T} <: HydroStorage{T}\n\nA regulated hydropower storage, modelled as a Storage node. A regulated hydro storage node requires a capacity for the discharge and does not have a required inflow from the model, except for water inflow from outside the model, although it requires a field input.\n\nFields\n\nid is the name/identifyer of the node.\nlevel::EMB.UnionCapacity are the level parameters of the HydroStor node. Depending on the chosen type, the charge parameters can include variable OPEX and/or fixed OPEX.\ndischarge::EMB.UnionCapacity are the discharging parameters of the HydroStor node. Depending on the chosen type, the discharge parameters can include variable OPEX, fixed OPEX, and/or a capacity.\nlevel_init::TimeProfile is the initial stored energy in the dam.\nlevel_inflow::TimeProfile is the inflow of power per operational period.\nlevel_min::TimeProfile is the minimum fraction of the reservoir capacity that has to remain in the HydroStorage node.\nstor_res::ResourceCarrier is the stored Resource.\ninput::Dict{Resource, Real} are the input Resources. In the case of a HydroStor, this field can be left out.\noutput::Dict{Resource, Real} can only contain one entry, the stored resource.\ndata::Vector{Data} additional data (e.g., for investments). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsRenewableProducers.PumpedHydroStor","page":"Public","title":"EnergyModelsRenewableProducers.PumpedHydroStor","text":"PumpedHydroStor{T} <: HydroStorage{T}\n\nA pumped hydropower storage, modelled as a Storage node. A pumped hydro storage node allows for storing energy through pumping water into the reservoir. The current implementation is a simplified node in which no lower reservoir is required. Instead, it is assumed that the reservoir has an infinite size.\n\nA pumped hydro storage node requires a capacity for both charge and discharge to account for the potential to store energy in the form of potential energy.\n\nFields\n\nid is the name/identifyer of the node.\ncharge::EMB.UnionCapacity are the charging parameters of the PumpedHydroStor node. Depending on the chosen type, the charge parameters can include variable OPEX, fixed OPEX, and/or a capacity.\nlevel::EMB.UnionCapacity are the level parameters of the PumpedHydroStor node. Depending on the chosen type, the charge parameters can include variable OPEX and/or fixed OPEX.\ndischarge::EMB.UnionCapacity are the discharging parameters of the PumpedHydroStor node. Depending on the chosen type, the discharge parameters can include variable OPEX, fixed OPEX, and/or a capacity.\nlevel_init::TimeProfile is the initial stored energy in the dam.\nlevel_inflow::TimeProfile is the inflow of power per operational period.\nlevel_min::TimeProfile is the minimum fraction of the reservoir capacity that has to remain in the HydroStorage node.\nstor_res::ResourceCarrier is the stored Resource.\ninput::Dict{Resource, Real} are the input Resources.\noutput::Dict{Resource, Real} can only contain one entry, the stored resource.\ndata::Vector{Data} additional data (e.g., for investments). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsRenewableProducers.HydroReservoir","page":"Public","title":"EnergyModelsRenewableProducers.HydroReservoir","text":"HydroReservoir{T} <: EMB.Storage{T}\n\nA regulated hydropower reservoir, modelled as a Storage node.\n\nA HydroReservoir differs from HydroStor andPumpedHydroStor nodes as it models the stored energy in the form of water through the potential energy. It can only be used in conjunction with HydroGenerator nodes.\n\nFields\n\nid is the name/identifyer of the node.\nvol::EMB.UnionCapacity are the storage volume parameters of the HydroReservoir node (typically million cubic meters).\nvol_inflow::TimeProfile is the water inflow to the reservoir (typically million cubic per time unit).\nstor_res::ResourceCarrier is the stored Resource.\ndata::Vector{<:Data} is the additional data (e.g., for investments or constraints through AbstractScheduleType). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsRenewableProducers.HydroGenerator","page":"Public","title":"EnergyModelsRenewableProducers.HydroGenerator","text":"HydroGenerator <: HydroUnit\n\nA hydropower generator, modelled as a HydroUnit node.\n\nA hydropower generator is located between two HydroReservoirs or between a HydroReservoir and a Sink node corresponding to the ocean. It differs from a HydroGate as it allows for power generation desctibed through an AbstractPqCurve.\n\nFields\n\nid is the name/identifier of the node.\ncap::TimeProfile is the installed discharge or power capacity.\n**pq_curve::AbstractPqCurve describes the relationship between power and discharge (water).\nopex_var::TimeProfile is the variable operational costs per energy unit produced.\nopex_fixed::TimeProfile is the fixed operational costs.\nelectricity_resource::Resource is the electricity resource generated as output.\nwater_resource::Resource is the water resource taken as input and discharged as output.\ndata::Vector{<:Data} is the additional data (e.g., for investments or constraints through AbstractScheduleType). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsRenewableProducers.HydroPump","page":"Public","title":"EnergyModelsRenewableProducers.HydroPump","text":"HydroPump <: HydroUnit\n\nA hydropower pump, modelled as a HydroUnit node.\n\nA hydropower pump is located between two HydroReservoirs and allows the transfer of water from one reservoir to the other through pumping the water.\n\nFields\n\nid is the name/identifier of the node.\ncap::TimeProfile is the installed pumping capacity in piwer or volume per time unit.\n**pq_curve::AbstractPqCurve describes the relationship between power and pumping of water.\nopex_var::TimeProfile is the variable operational costs per energy unit produced.\nopex_fixed::TimeProfile is the fixed operational costs.\nelectricity_resource::Resource is the electricity resource taken as input (consumed).\nwater_resource::Resource is the water resource taken as input and discharged (pumped) as output.\ndata::Vector{<:Data} is the additional data (e.g., for investments or constraints through AbstractScheduleType). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsRenewableProducers.HydroGate","page":"Public","title":"EnergyModelsRenewableProducers.HydroGate","text":"HydroGate <: EMB.NetworkNode\n\nA hydro gate, modelled as a NetworkNode node.\n\nIt an be used to model outlets/inlets and minimum/maximum requirements for water flow between individual reservoirs without power generation.\n\nFields\n\nid is the name/identifier of the node.\ncap::TimeProfile is the installed discharge capacity.\nopex_var::TimeProfile is the variational operational costs per water flow through the gate.\nopex_fixed::TimeProfile is the fixed operational costs.\nresource::ResourceCarrier is the water resource type since gates are only used for discharging water.\ndata::Vector{<:Data} is the additional data (e.g., for investments or constraints through AbstractScheduleType). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#lib-pub-node-legacy","page":"Public","title":"Legacy constructors","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"RegHydroStor","category":"page"},{"location":"library/public/#EnergyModelsRenewableProducers.RegHydroStor","page":"Public","title":"EnergyModelsRenewableProducers.RegHydroStor","text":"RegHydroStor(\n    id::Any,\n    rate_cap::TimeProfile,\n    stor_cap::TimeProfile,\n    has_pump::Bool,\n    level_init::TimeProfile,\n    level_inflow::TimeProfile,\n    level_min::TimeProfile,\n    opex_var::TimeProfile,\n    opex_fixed::TimeProfile,\n    stor_res::ResourceCarrier,\n    input,\n    output,\n    Data,\n)\n\nOriginal Legacy constructor for a regulated hydropower storage, with or without pumping capabilities. This version is discontinued starting with Version 0.6.0. resulting in an error It is replaced with the two new types HydroStor and PumpedHydroStor to utilize the concept of multiple dispatch instead of logic.\n\nSee the documentation for further information regarding how you can translate your existing model to the new model.\n\nFields\n\nid is the name/identifyer of the node.\nrate_cap::TimeProfile is the installed installed rate capacity.\nstor_cap::TimeProfile is the installed storage capacity in the dam.\nhas_pump::Bool states wheter the stored resource can flow in.\nlevel_init::TimeProfile is the initial stored energy in the dam.\nlevel_inflow::TimeProfile is the inflow of power per operational period.\nlevel_min::TimeProfile is the minimum fraction of the reservoir capacity that has to remain in the HydroStorage node.\nopex_var::TimeProfile are the variable operational expenses per GWh produced.\nopex_fixed::TimeProfile are the fixed operational costs of the storage caacity.\nstor_res::ResourceCarrier is the stored Resource.\ninput::Dict{Resource, Real} are the stored and used resources. The values in the Dict are ratios describing the energy loss when using the pumps.\noutput::Dict{Resource, Real} can only contain one entry, the stored resource.\ndata::Array{Data} additional data (e.g. for investments). This value is conditional through the application of a constructor.\n\n\n\n\n\n","category":"function"},{"location":"library/public/#lib-pub-add","page":"Public","title":"Additional types","text":"","category":"section"},{"location":"library/public/#lib-pub-add-bat_life","page":"Public","title":"Providing a battery lifetime","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"The battery nodes can have either an infinity lifetime or a finite lifetime in which the capacity is reduced due to charging the battery. In this case, the lifetime is given by the number of cycles.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"InfLife\nCycleLife","category":"page"},{"location":"library/public/#EnergyModelsRenewableProducers.InfLife","page":"Public","title":"EnergyModelsRenewableProducers.InfLife","text":"InfLife <: AbstractBatteryLife\n\nA life type corresponding to an infinite number of cycles without any battery degradation. The charge utilization is still calculated.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsRenewableProducers.CycleLife","page":"Public","title":"EnergyModelsRenewableProducers.CycleLife","text":"CycleLife <: AbstractBatteryLife\n\nA life type corresponding to a linear degradation of the battery lifetime up to a given number of cycles.\n\nFields\n\ncycles::Int is the number of cycles that the battery can tolerate.\ndegradation::Float64 is the relative allowed capacity reduction at the end of life of the battery.\nstack_cost::TimeProfile is the relative cost for replacing a battery stack once it reached its maximum number of cycles.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#lib-int-types-con","page":"Public","title":"Constraint types","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"MinSchedule\nMaxSchedule\nEqualSchedule\nScheduleConstraint","category":"page"},{"location":"library/public/#EnergyModelsRenewableProducers.MinSchedule","page":"Public","title":"EnergyModelsRenewableProducers.MinSchedule","text":"abstract type MinSchedule <: AbstractScheduleType\n\nAbstract type used to define a ScheduleConstraint as a minimum constraint.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsRenewableProducers.MaxSchedule","page":"Public","title":"EnergyModelsRenewableProducers.MaxSchedule","text":"abstract type MaxSchedule <: AbstractScheduleType\n\nAbstract type used to define a ScheduleConstraint as a maximum constraint.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsRenewableProducers.EqualSchedule","page":"Public","title":"EnergyModelsRenewableProducers.EqualSchedule","text":"abstract type EqualSchedule <: AbstractScheduleType\n\nAbstract type used to define a ScheduleConstraint as a schedule constraint.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsRenewableProducers.ScheduleConstraint","page":"Public","title":"EnergyModelsRenewableProducers.ScheduleConstraint","text":"ScheduleConstraint{T} <: Data where {T<:AbstractScheduleType}\n\nA constraint that can be added as Data. T <: AbstractScheduleType denotes the constraint type.\n\nFields\n\nresource::{Union{<:Resource, Nothing}} is the resource type the constraint applies to if the node can have multiple resources as input/outputs.\nvalue::TimeProfile is the constraint value, that is the limit that should not be violated.\nflag::TimeProfile is a boolean value indicating if the constraint is active.\npenalty::TimeProfile is the penalty for violating the constraint. If penalty is set to Inf it will be built as a hard constraint.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#lib-int-types-pq","page":"Public","title":"Power-flow curves","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"PqPoints","category":"page"},{"location":"library/public/#EnergyModelsRenewableProducers.PqPoints","page":"Public","title":"EnergyModelsRenewableProducers.PqPoints","text":"struct PqPoints <: AbstractPqCurve\nPqPoints(power_levels::Vector{Real}, discharge_levels::Vector{Real})\nPqPoints(eq::Real)\n\nThe relationship between discharge/pumping of water and power generation/consumption represented by a set of discharge and power values (PQ-points).\n\nFields\n\npower_levels::Vector{Real} is a vector of power values.\ndischarge_levels::Vector{Real} is a vector of discharge values.\n\nThe two vectors muct be of equal size and ordered so that the power and discharge values describes the conversion from energy (stored in the water) to electricity (power) for a HydroGenerator node or the conversion from electric energy to energy stored as water in the reservoirs for a HydroPump node.\n\nThe first value in each vector should be zero. Furthermore, the vectors should be relative to the installed capacity, so that either the power-vector or the discharge vector is in the range [0, 1].\n\nIf a single Real is provided as input, it constructs the two Arrays through the energy equivalent input. If this approach is used, the installed capacity of the node must refer to the power capacity of a HydroGenerator or HydroPump node.\n\nnote: Note\nThe described power-discharge relationship should be concave for a HydroGenerator node and convex for a HydroPump node.\n\n\n\n\n\n","category":"type"},{"location":"nodes/nondisres/#nodes-nondisres","page":"Non-dispatchable RES","title":"Non-dispatchable renewable energy source node","text":"","category":"section"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"Non-dispatchable renewable energy sources generate electricity from intermittent energy sources. Examples for intermittent energy sources are solar irradiation, the wind, or the flow within rivers. Although these energy sources have a constant nominal capacity, their production depends on intermittent energy sources. Although EnergyModelsX allows for capacities varying on the operational level, it is then not possible to include investments for a technology. As a consequence, the design of the RefSource is not satisfactory, when considering potential investments in capacities.=.","category":"page"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"Hence, it is necessary to implement a source node representing intermittent renewable energy generation.","category":"page"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"note: Abstract supertype\nWe implemented an abstract supertype AbstractNonDisRES. This supertype is used for introducing the variable textttcurtailmentn t and updateing the capacity constraints. Hence, if you plan to create a new non-dispatchable renewable energy source, you can create it as subtype of AbstractNonDisRES, resulting in the variable being available.","category":"page"},{"location":"nodes/nondisres/#nodes-nondisres-fields","page":"Non-dispatchable RES","title":"Introduced type and its field","text":"","category":"section"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"The NonDisRES is implemented as equivalent to a RefSource. Hence, it utilizes the same functions declared in EnergyModelsBase.","category":"page"},{"location":"nodes/nondisres/#nodes-nondisres-fields-stand","page":"Non-dispatchable RES","title":"Standard fields","text":"","category":"section"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"The standard fields are given as:","category":"page"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"id:\nThe field id is only used for providing a name to the node. This is similar to the approach utilized in EnergyModelsBase.\ncap::TimeProfile:\nThe installed capacity corresponds to the nominal capacity of the node.\nIf the node should contain investments through the application of EnergyModelsInvestments, it is important to note that you can only use FixedProfile or StrategicProfile for the capacity, but not RepresentativeProfile or OperationalProfile. In addition, all values have to be non-negative.\nopex_var::TimeProfile:\nThe variable operational expenses are based on the capacity utilization through the variable :cap_use. Hence, it is directly related to the specified output ratios. The variable operating expenses can be provided as OperationalProfile as well.\nopex_fixed::TimeProfile:\nThe fixed operating expenses are relative to the installed capacity (through the field cap) and the chosen duration of a strategic period as outlined on Utilize TimeStruct.\nIt is important to note that you can only use FixedProfile or StrategicProfile for the fixed OPEX, but not RepresentativeProfile or OperationalProfile. In addition, all values have to be non-negative.\noutput::Dict{<:Resource, <:Real}:\nThe field output includes Resources with their corresponding conversion factors as dictionaries. In the case of a non-dispatchable renewable energy source, output should always include your electricity resource.In practice, you should use a value of 1.\nAll values have to be non-negative.\ndata::Vector{Data}:\nAn entry for providing additional data to the model. In the current version, it is only relevant for additional investment data when EnergyModelsInvestments is used.\nnote: Note\nThe field data is not required as we include a constructor when the value is excluded.","category":"page"},{"location":"nodes/nondisres/#nodes-nondisres-fields-new","page":"Non-dispatchable RES","title":"Additional fields","text":"","category":"section"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"NonDisRES nodes add a single additional field  compared to a RefSource:","category":"page"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"profile::TimeProfile:\nThe profile is used as a multiplier to the installed capacity to represent the maximum actual capacity in each operational period.\nThe profile should be provided as OperationalProfile or at least as RepresentativeProfile. In addition, all values should be in the range 0 1.","category":"page"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"This field is at the 3ʳᵈ position below the field cap as shown in NonDisRES.","category":"page"},{"location":"nodes/nondisres/#nodes-nondisres-math","page":"Non-dispatchable RES","title":"Mathematical description","text":"","category":"section"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"In the following mathematical equations, we use the name for variables and functions used in the model. Variables are in general represented as","category":"page"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"textttvar_exampleindex_1 index_2","category":"page"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"with square brackets, while functions are represented as","category":"page"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"func_example(index_1 index_2)","category":"page"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"with paranthesis.","category":"page"},{"location":"nodes/nondisres/#nodes-nondisres-math-var","page":"Non-dispatchable RES","title":"Variables","text":"","category":"section"},{"location":"nodes/nondisres/#nodes-nondisres-math-var-stand","page":"Non-dispatchable RES","title":"Standard variables","text":"","category":"section"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"The non-dispatchable renewable energy source node types utilize all standard variables from the RefSource node type, as described on the page Optimization variables. The variables include:","category":"page"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"textttopex_var\ntextttopex_fixed\ntextttcap_use\ntextttcap_inst\ntextttflow_out\ntextttemissions_node if EmissionsData is added to the field data.","category":"page"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"note: Note\nNon-dispatchable renewable energy source nodes are not compatible with CaptureData. Hence, you can only provide EmissionsProcess to the node. It is our aim to include the potential for construction emissions in a latter stage","category":"page"},{"location":"nodes/nondisres/#nodes-nondisres-math-add","page":"Non-dispatchable RES","title":"Additional variables","text":"","category":"section"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"NonDisRES nodes should keep track on the curtailment of the electricity, that is the unused capacity in each operational time period. Hence, a single additional variable is declared through dispatching on the method EnergyModelsBase.variables_node():","category":"page"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"textttcurtailmentn t: Curtailed capacity of source n in operational period t with a typical unit of MW.\nThe curtailed electricity specifies the unused generation capacity of the non-dispatchable energy source. It is currently only used in the calculation, but not with a cost. This can be added by the user, if desired.","category":"page"},{"location":"nodes/nondisres/#nodes-nondisres-math-con","page":"Non-dispatchable RES","title":"Constraints","text":"","category":"section"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"The following sections omit the direction inclusion of the vector of CO₂ source nodes. Instead, it is implicitly assumed that the constraints are valid forall n  N^textNonDisRES_source for all NonDisRES types if not stated differently. In addition, all constraints are valid forall t in T (that is in all operational periods) or forall t_inv in T^Inv (that is in all strategic periods).","category":"page"},{"location":"nodes/nondisres/#nodes-nondisres-math-con-stand","page":"Non-dispatchable RES","title":"Standard constraints","text":"","category":"section"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"Non-dispatchable renewable energy source nodes utilize in general the standard constraints described on Constraint functions. In fact, they use the same create_node function as a RefSource node. These standard constraints are:","category":"page"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"constraints_capacity_installed:\ntextttcap_instn t = capacity(n t)\ntip: Using investments\nThe function constraints_capacity_installed is also used in EnergyModelsInvestments to incorporate the potential for investment. Nodes with investments are then no longer constrained by the parameter capacity.\nconstraints_flow_out:\ntextttflow_outn t p =\noutputs(n p) times textttcap_usen t\nqquad forall p in outputs(n) setminus textCO_2\nconstraints_opex_fixed:\ntextttopex_fixedn t_inv = opex_fixed(n t_inv) times textttcap_instn first(t_inv)\ntip: Why do we use `first()`\nThe variables textttcap_inst are declared over all operational periods (see the section on Capacity variables for further explanations). Hence, we use the function first(t_inv) to retrieve the installed capacities in the first operational period of a given strategic period t_inv in the function constraints_opex_fixed.\nconstraints_opex_var:\ntextttopex_varn t_inv = sum_t in t_inv opex_var(n t) times textttcap_usen t times scale_op_sp(t_inv t)\ntip: The function `scale_op_sp`\nThe function scale_op_sp(t_inv t) calculates the scaling factor between operational and strategic periods. It also takes into account potential operational scenarios and their probability as well as representative periods.\nconstraints_data:\nThis function is only called for specified data of the non-dispatchable renewable energy source, see above.","category":"page"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"The function constraints_capacity is extended with a new method for non-dispatchable renewable energy source nodes to allow the inclusion of the production profile and the variable textttcurtailmentn t. It now includes two individual constraints:","category":"page"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"textttcap_usen t leq textttcap_instn t","category":"page"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"and","category":"page"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"textttcap_usen t + textttcurtailmentn t =\nprofile(n t) times textttcap_instn t","category":"page"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"This function still calls the subfunction constraints_capacity_installed to limit the variable textttcap_instn t or provide capacity investment options.","category":"page"},{"location":"nodes/nondisres/#nodes-nondisres-math-con-add","page":"Non-dispatchable RES","title":"Additional constraints","text":"","category":"section"},{"location":"nodes/nondisres/","page":"Non-dispatchable RES","title":"Non-dispatchable RES","text":"NonDisRES nodes do not add additional constraints.","category":"page"}]
}
