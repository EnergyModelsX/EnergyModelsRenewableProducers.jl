var documenterSearchIndex = {"docs":
[{"location":"manual/quick-start/#quick_start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"Install the most recent version of Julia\nInstall the package EnergyModelsBase and the time package TimeStruct, by running:\n] add TimeStruct\n] add EnergyModelsBase\nThese packages are required as we do not only use them internally, but also for building a model.\nInstall the package EnergyModelsRenewableProducers\n] add EnergyModelsRenewableProducers","category":"page"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"note: Note\nIf you receive the error that EnergyModelsRenewableProducers is not yet registered, you have to add the package using the GitHub repository through] add https://github.com/EnergyModelsX/EnergyModelsRenewableProducers.jlOnce the package is registered, this is not required.","category":"page"},{"location":"how-to/update-models/#update-models","page":"Update models","title":"Update your model to the latest versions","text":"","category":"section"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"EnergyModelsRenewableProducers is still in a pre-release version. Hence, there are frequently breaking changes occuring, although we plan to keep backwards compatibility. This document is designed to provide users with information regarding how they have to adjust their models to keep compatibility to the latest changes. We will as well implement information regarding the adjustment of extension packages, although this is more difficult due to the vast majority of potential changes.","category":"page"},{"location":"how-to/update-models/#Adjustments-from-0.4.2","page":"Update models","title":"Adjustments from 0.4.2","text":"","category":"section"},{"location":"how-to/update-models/#Key-changes-for-nodal-descriptions","page":"Update models","title":"Key changes for nodal descriptions","text":"","category":"section"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"Version 0.7 of EnergyModelsBase introduced both storage behaviours resulting in a rework of the individual approach for calculating the level balance as well as the potential to have charge and discharge capacities through storage parameters.","category":"page"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"note: Note\nThe legacy constructors for calls of the composite type of version 0.5 will be included at least until version 0.7.","category":"page"},{"location":"how-to/update-models/#[HydroStor](@ref)","page":"Update models","title":"HydroStor","text":"","category":"section"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"HydroStor was significantly reworked due to the changes in EnergyModelsBase The total rework is provided below.","category":"page"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"# The previous nodal description for a `HydroStor` node was given by:\nHydroStor(\n    id,\n    rate_cap::TimeProfile,\n    stor_cap::TimeProfile,\n\n    level_init::TimeProfile,\n    level_inflow::TimeProfile,\n    level_min::TimeProfile,\n\n    opex_var::TimeProfile,\n    opex_fixed::TimeProfile,\n    stor_res::ResourceCarrier,\n    input::Dict{<:Resource, <:Real},\n    output::Dict{<:Resource, <:Real},\n    data::Vector{Data},\n)\n\n# This translates to the following new version\nHydroStor{CyclicStrategic}(\n    id,\n    StorCapOpexFixed(stor_cap, opex_fixed),\n    StorCapOpexVar(rate_cap, opex_var),\n    level_init,\n    level_inflow,\n    level_min,\n    stor_res,\n    input,\n    output,\n    data,\n)","category":"page"},{"location":"how-to/update-models/#[PumpedHydroStor](@ref)","page":"Update models","title":"PumpedHydroStor","text":"","category":"section"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"PumpedHydroStor was significantly reworked due to the changers in EnergyModelsBase The total rework is provided below.","category":"page"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"# The previous nodal description for a `PumpedHydroStor` node was given by:\nPumpedHydroStor(\n    id,\n    rate_cap::TimeProfile,\n    stor_cap::TimeProfile,\n\n    level_init::TimeProfile,\n    level_inflow::TimeProfile,\n    level_min::TimeProfile,\n\n    opex_var::TimeProfile,\n    opex_var_pump::TimeProfile,\n    opex_fixed::TimeProfile,\n    stor_res::ResourceCarrier,\n    input::Dict{<:Resource, <:Real},\n    output::Dict{<:Resource, <:Real},\n    data::Vector{Data},\n)\n\n# This translates to the following new version\nPumpedHydroStor{CyclicStrategic}(\n    id,\n    StorCapOpexVar(rate_cap, opex_var_pump),\n    StorCapOpexFixed(stor_cap, opex_fixed),\n    StorCapOpexVar(rate_cap, opex_var),\n    level_init,\n    level_inflow,\n    level_min,\n    stor_res,\n    input,\n    output,\n    data,\n)","category":"page"},{"location":"how-to/update-models/#Adjustments-from-0.4.0-to-0.6.x","page":"Update models","title":"Adjustments from 0.4.0 to 0.6.x","text":"","category":"section"},{"location":"how-to/update-models/#Key-changes-for-nodal-descriptions-2","page":"Update models","title":"Key changes for nodal descriptions","text":"","category":"section"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"Version 0.4.1 introduced two new types that replaced the original RegHydroStor node with two types called PumpedHydroStor and HydroStor. The changes allowed for the introduction of a variable OPEX for pumping. In the translation below, it is assumed that the variable OPEX for pumping is 0.","category":"page"},{"location":"how-to/update-models/","page":"Update models","title":"Update models","text":"# The previous nodal description was given by:\nRegHydroStor(\n    id::Any,\n    rate_cap::TimeProfile,\n    stor_cap::TimeProfile,\n    has_pump::Bool,\n    level_init::TimeProfile,\n    level_inflow::TimeProfile,\n    level_min::TimeProfile,\n    opex_var::TimeProfile,\n    opex_fixed::TimeProfile,\n    stor_res::ResourceCarrier,\n    input,\n    output,\n    Data,\n)\n\n# This translates to the following new version if has_pump == true\nPumpedHydroStor(\n    id,\n    StorCapOpexVar(rate_cap, FixedProfile(0)),\n    StorCapOpexFixed(stor_cap, opex_fixed),\n    StorCapOpexVar(rate_cap, opex_var),\n    level_init,\n    level_inflow,\n    level_min,\n    stor_res,\n    input,\n    output,\n    Data,\n)\n# and the following version if has_pump == false\nHydroStor(\n    id,\n    StorCapOpexFixed(stor_cap, opex_fixed),\n    StorCapOpexVar(rate_cap, opex_var),\n    level_init,\n    level_inflow,\n    level_min,\n    stor_res,\n    input,\n    output,\n    Data,\n)","category":"page"},{"location":"how-to/contribute/#Contribute-to-EnergyModelsRenewableProducers","page":"Contribute to EnergyModelsRenewableProducers","title":"Contribute to EnergyModelsRenewableProducers","text":"","category":"section"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsRenewableProducers","title":"Contribute to EnergyModelsRenewableProducers","text":"Contributing to EnergyModelsRenewableProducers can be achieved in several different ways.","category":"page"},{"location":"how-to/contribute/#File-a-bug-report","page":"Contribute to EnergyModelsRenewableProducers","title":"File a bug report","text":"","category":"section"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsRenewableProducers","title":"Contribute to EnergyModelsRenewableProducers","text":"Another approach to contributing to EnergyModelsRenewableProducers is through filing a bug report as an issue when unexpected behaviour is occuring.","category":"page"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsRenewableProducers","title":"Contribute to EnergyModelsRenewableProducers","text":"When filing a bug report, please follow the following guidelines:","category":"page"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsRenewableProducers","title":"Contribute to EnergyModelsRenewableProducers","text":"Be certain that the bug is a bug and originating in EnergyModelsRenewableProducers:\nIf the problem is within the results of the optimization problem, please check first that the nodes are correctly linked with each other. Frequently, missing links (or wrongly defined links) restrict the transport of energy/mass. If you are certain that all links are set correctly, it is most likely a bug in EnergyModelsRenewableProducers and should be reported.\nIf the problem occurs in model construction, it is most likely a bug in either EnergyModelsBase or EnergyModelsRenewableProducers and should be reported in the respective package. The error message of Julia should provide you with the failing function and whether the failing function is located in EnergyModelsBase or EnergyModelsRenewableProducers. It can occur, that the last shown failing function is within JuMP or MathOptInterface. In this case, it is best to trace the error to the last called EnergyModelsBase or EnergyModelsRenewableProducers function.\nIf the problem is only appearing for specific solvers, it is most likely not a bug in EnergyModelsRenewableProducers, but instead a problem of the solver wrapper for MathOptInterface. In this case, please contact the developers of the corresponding solver wrapper.\nLabel the issue as bug, and\nProvide a minimum working example of a case in which the bug occurs.","category":"page"},{"location":"how-to/contribute/#Feature-requests","page":"Contribute to EnergyModelsRenewableProducers","title":"Feature requests","text":"","category":"section"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsRenewableProducers","title":"Contribute to EnergyModelsRenewableProducers","text":"EnergyModelsRenewableProducers includes several new nodal descriptions for renewable energy producers. However, there can be a demand for additional requirements for the existing nodes or for new descriptions which fall below the umbrella of renewable energy producers. In this case, you can contribute through a feature request.","category":"page"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsRenewableProducers","title":"Contribute to EnergyModelsRenewableProducers","text":"Feature requests for EnergyModelsRenewableProducers should follow the guidelines developed for EnergyModelsBase.","category":"page"},{"location":"how-to/contribute/","page":"Contribute to EnergyModelsRenewableProducers","title":"Contribute to EnergyModelsRenewableProducers","text":"note: Note\nEnergyModelsRenewableProducers is slightly different than EnergyModelsBase.Contrary to the other package, we consider that it is beneficial to have all potential features of renewable energy production within EnergyModelsRenewableProducers. Hence, if you have a requirement for a new nodal description, do not hesitate to create an issue.","category":"page"},{"location":"manual/simple-example/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"For the content of the example, see the examples directory in the project repository.","category":"page"},{"location":"manual/simple-example/#The-package-is-installed-with-]-add","page":"Examples","title":"The package is installed with ] add","text":"","category":"section"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"From the Julia REPL, run","category":"page"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"# Starts the Julia REPL\njulia> using EnergyModelsRenewableProducers\n# Get the path of the examples directory\njulia> exdir = joinpath(pkgdir(EnergyModelsRenewableProducers), \"examples\")\n# Include the code into the Julia REPL to run the first example of the NonDisRes node\njulia> include(joinpath(exdir, \"simple_nondisres.jl\"))\n# Include the code into the Julia REPL to run the first example of the Hydropower node\njulia> include(joinpath(exdir, \"simple_hydro_power.jl\"))","category":"page"},{"location":"manual/simple-example/#The-code-was-downloaded-with-git-clone","page":"Examples","title":"The code was downloaded with git clone","text":"","category":"section"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"The examples can then be run from the terminal with","category":"page"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"~/../EnergyModelsRenewableProducers.jl/examples $ julia simple_nondisres.jl\n~/../EnergyModelsRenewableProducers.jl/examples $ julia simple_hydro_power.jl","category":"page"},{"location":"manual/optimization-variables/#optimization_variables","page":"Optimization variables","title":"Optimization variables","text":"","category":"section"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"EnergyModelsRenewableProduces declares new variables for the introduced Nodes. The different variables are explained below including how they are introduced in different constraints. Thes variables are created by the method EMB.variables_node which is a method dispatched on from EnergyModelsBase.","category":"page"},{"location":"manual/optimization-variables/#[NonDisRES](@ref)","page":"Optimization variables","title":"NonDisRES","text":"","category":"section"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"NonDisRES is a subtype of the Source node declared in EnergyModelsBase. Hence, it has by default the same variables as a RefSource node declared in EnergyModelsBase.","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"In addition, the following new optimization variable is added:","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"textttcurtailmentn t: Curtailment of NonDisRES node n in operational period t.","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"Curtailment represents the amount of energy not produced by node n ::NonDisRes at operational period t.","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"The variable is used in the following constraint within EMB.create_node(m, n::NonDisRES, 𝒯, 𝒫, modeltype::EnergyModel),","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"textttcap_usen t + textttcurtailmentn t = textttprofile(n t) cdot textttcap_instn t.","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"note: Note\nBrackets n t correspond to accessing a variable, while parenthesis (n t) correspond to functions for accessing fields of a composite type.","category":"page"},{"location":"manual/optimization-variables/#[HydroStorage](@ref)","page":"Optimization variables","title":"HydroStorage","text":"","category":"section"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"Both PumpedHydroStor and HydroStor are in a fist instance subtypes of HydroStorage, and hence, subtypes of the Storage node declared in EnergyModelsBase. Hence, it has by default the same variables as a RefStorage node declared in EnergyModelsBase.","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"In addition, the following new optimization variable is added:","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"texttthydro_spilln t: Spillage from HydroStorage node n in operational period t.","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"The spillage is introduced to allow for an overflow from a reservoir if the inflow to a reservoir exceed its capacity and the outflow through power generation.","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"The variable is used in the following constraint EMB.constraints_level_aux,","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"textttstor_level_Deltatexttt_opn t = textttlevel_inflow(n t) + textttinputs(n p_textttPower) cdot textttflow_inn t + textttstor_discharge_usen t - texttthydro_spilln t","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"for the stored resource p_textttPower.","category":"page"},{"location":"manual/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"note: Note\nBrackets n t correspond to accessing a variable, while parenthesis (n t) correspond to functions for accessing fields of a composite type.","category":"page"},{"location":"library/internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"library/internals/#Types","page":"Internals","title":"Types","text":"","category":"section"},{"location":"library/internals/","page":"Internals","title":"Internals","text":"Modules = [EnergyModelsRenewableProducers]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"library/internals/#Methods","page":"Internals","title":"Methods","text":"","category":"section"},{"location":"library/internals/","page":"Internals","title":"Internals","text":"Modules = [EnergyModelsRenewableProducers]\nPublic = false\nOrder = [:function]","category":"page"},{"location":"library/internals/#EnergyModelsBase.check_node-Tuple{HydroStorage, Any, EnergyModel, Bool}","page":"Internals","title":"EnergyModelsBase.check_node","text":"EMB.check_node(n::HydroStorage, 𝒯, modeltype::EMB.EnergyModel, check_timeprofiles::Bool)\n\nThis method checks that the HydroStorage node is valid.\n\nChecks\n\nThe TimeProfile of the field capacity in the type in the field charge is required to be non-negative if the chosen composite type has the field capacity.\nThe TimeProfile of the field capacity in the type in the field level is required to be non-negative`.\nThe TimeProfile of the field capacity in the type in the field discharge is required to be non-negative if the chosen composite type has the field capacity.\nThe TimeProfile of the field fixed_opex is required to be non-negative and accessible through a StrategicPeriod as outlined in the function check_fixed_opex(n, 𝒯ᴵⁿᵛ, check_timeprofiles) for the chosen composite type .\nThe field output can only include a single Resource.\nThe value of the field output is required to be smaller or equal to 1.\nThe value of the field input is required to be in the range 0 1.\nThe value of the field level_init is required to be in the range  level_min 1 cdot stor_cap(t) for all time steps t  mathcalT.\nThe value of the field level_init is required to be in the range 0 1.\nThe value of the field level_min is required to be in the range 0 1.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsBase.check_node-Tuple{NonDisRES, Any, EnergyModel, Bool}","page":"Internals","title":"EnergyModelsBase.check_node","text":"EMB.check_node(n::NonDisRES, 𝒯, modeltype::EMB.EnergyModel, check_timeprofiles::Bool)\n\nThis method checks that the NonDisRES node is valid.\n\nChecks\n\nThe field cap is required to be non-negative (similar to the Source check).\nThe value of the field fixed_opex is required to be non-negative and accessible through a StrategicPeriod as outlined in the function check_fixed_opex(n, 𝒯ᴵⁿᵛ, check_timeprofiles).\nThe values of the dictionary output are required to be non-negative (similar to the Source check).\nThe field profile is required to be in the range 0 1 for all time steps t  mathcalT.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsBase.constraints_capacity-Tuple{Any, NonDisRES, TimeStruct.TimeStructure, EnergyModel}","page":"Internals","title":"EnergyModelsBase.constraints_capacity","text":"constraints_capacity(m, n::NonDisRES, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the constraint on the maximum capacity of a NonDisRES. Also sets the constraint defining curtailment.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsBase.constraints_flow_in-Tuple{Any, HydroStor, TimeStruct.TimeStructure, EnergyModel}","page":"Internals","title":"EnergyModelsBase.constraints_flow_in","text":"constraints_flow_in(m, n::HydroStor, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nWhen n::HydroStor, the the variable :flow_in is fixed to 0 for all potential inputs.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsBase.constraints_flow_in-Tuple{Any, PumpedHydroStor, TimeStruct.TimeStructure, EnergyModel}","page":"Internals","title":"EnergyModelsBase.constraints_flow_in","text":"constraints_flow_in(m, n, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nWhen n::PumpedHydroStor, the the variable :flow_in is used contrary to standard nodes, that is the variable :flow_in is multiplied with the inputs value.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsBase.constraints_level_aux-Tuple{Any, HydroStorage, Any, Any, EnergyModel}","page":"Internals","title":"EnergyModelsBase.constraints_level_aux","text":"EMB.constraints_level_aux(m, n::HydroStorage, 𝒯, 𝒫, modeltype)\n\nFunction for creating the Δ constraint for the level of a HydroStorage node as well as the specification of the initial level in a strategic period.\n\nThe change in storage level in the reservoir at operational periods t is the inflow through level_inflow plus the input flow_in minus the production stor_rate_use and the spillage of water due to overflow hydro_spill.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsBase.create_node-Tuple{Any, HydroStorage, Any, Any, EnergyModel}","page":"Internals","title":"EnergyModelsBase.create_node","text":"EMB.create_node(m, n::HydroStorage, 𝒯, 𝒫, modeltype::EnergyModel)\n\nSets all constraints for the regulated hydro storage node.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsBase.variables_node-Tuple{Any, Vector{<:HydroStorage}, Any, EnergyModel}","page":"Internals","title":"EnergyModelsBase.variables_node","text":"EMB.variables_node(m, 𝒩::Vector{<:HydroStorage}, 𝒯, modeltype::EnergyModel)\n\nCreate the optimization variable :hydro_spill for every HydroStorage node. This variable enables hydro storage nodes to spill water from the reservoir without producing energy. Wihtout this slack variable, parameters with too much inflow would else lead to an infeasible model. \n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsBase.variables_node-Tuple{Any, Vector{NonDisRES}, Any, EnergyModel}","page":"Internals","title":"EnergyModelsBase.variables_node","text":"EMB.variables_node(m, 𝒩ⁿᵈʳ::Vector{NonDisRES}, 𝒯, modeltype::EnergyModel)\n\nCreate the optimization variable :curtailment for every NonDisRES node. This method is called from EnergyModelsBase.jl.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsRenewableProducers.level_inflow-Tuple{HydroStorage, Any}","page":"Internals","title":"EnergyModelsRenewableProducers.level_inflow","text":"level_inflow(n::HydroStorage, t)\n\nReturns the inflow to a node n of type HydroStorage at operational period t\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsRenewableProducers.level_init-Tuple{HydroStorage, Any}","page":"Internals","title":"EnergyModelsRenewableProducers.level_init","text":"level_init(n::HydroStorage, t)\n\nReturns the innitial level of a node n of type HydroStorage at operational period t\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsRenewableProducers.level_min-Tuple{HydroStorage, Any}","page":"Internals","title":"EnergyModelsRenewableProducers.level_min","text":"level_min(n::HydroStorage, t)\n\nReturns the minimum level of a node n of type HydroStorage at operational period t\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsRenewableProducers.opex_var_pump-Tuple{PumpedHydroStor, Any}","page":"Internals","title":"EnergyModelsRenewableProducers.opex_var_pump","text":"opex_var_pump(n::PumpedHydroStor, t)\n\nReturns the variable OPEX of a node n of type PumpedHydroStor related to pumping at operational period t\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsRenewableProducers.profile-Tuple{NonDisRES, Any}","page":"Internals","title":"EnergyModelsRenewableProducers.profile","text":"profile(n::NonDisRES, t)\n\nReturns the profile of a node n of type NonDisRES at operational period t.\n\n\n\n\n\n","category":"method"},{"location":"manual/NEWS/#Release-notes","page":"Release notes","title":"Release notes","text":"","category":"section"},{"location":"manual/NEWS/#Unversioned","page":"Release notes","title":"Unversioned","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Use dev version of EMRP for examples when running as part of tests, similar to PR #33 of EMB.","category":"page"},{"location":"manual/NEWS/#Version-0.6.0-(2024-05-28)","page":"Release notes","title":"Version 0.6.0 (2024-05-28)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjusted to changes introduced in EnergyModelsBase v0.7.\nRemove legacy constructor for RegHydroStor and provide a warning for it.\nAdded constructors for HydroStor not requiring any longer specifying an input dictionary.","category":"page"},{"location":"manual/NEWS/#Version-0.5.6-(2024-05-09)","page":"Release notes","title":"Version 0.5.6 (2024-05-09)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Provided a contribution section in the documentation.\nFixed a link in the documentation for the examples.","category":"page"},{"location":"manual/NEWS/#Version-0.5.5-(2024-03-21)","page":"Release notes","title":"Version 0.5.5 (2024-03-21)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Minor changes to the checks to be consistent with EnergyModelsBase v0.6.7.","category":"page"},{"location":"manual/NEWS/#Version-0.5.4-(2024-03-04)","page":"Release notes","title":"Version 0.5.4 (2024-03-04)","text":"","category":"section"},{"location":"manual/NEWS/#Examples","page":"Release notes","title":"Examples","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Fixed a bug when running the examples from a non-cloned version of EnergyModelsRenewableProducers.\nThis was achieved through a separate Project.toml in the examples.","category":"page"},{"location":"manual/NEWS/#NonDIsRes-node","page":"Release notes","title":"NonDIsRes node","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Moved the capacity constraints through the profile to the function EMB.constraints_capacity(n::NonDisRES, ...), and hence, removed the function EMB.create_node(n::NonDisRES, ...).","category":"page"},{"location":"manual/NEWS/#Minor-updates","page":"Release notes","title":"Minor updates","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Added some checks and tests to the checks.\nRestructured the test folder.","category":"page"},{"location":"manual/NEWS/#Version-0.5.3-(2024-01-30)","page":"Release notes","title":"Version 0.5.3 (2024-01-30)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Updated the restrictions on the fields of individual types to be consistent.\nAdded option to not include the field data for the individual introduced Nodes.","category":"page"},{"location":"manual/NEWS/#Version-0.5.2-(2024-01-19)","page":"Release notes","title":"Version 0.5.2 (2024-01-19)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Updated the documenation to be in line with the updated done in EnergyModelsBsae.\nMoved RegHydroStor to a new file, legacy_constructors.jl to highlight that a user should use the new types, namely HydroStor and PumpedHydroStor.","category":"page"},{"location":"manual/NEWS/#Version-0.5.1-(2024-01-17)","page":"Release notes","title":"Version 0.5.1 (2024-01-17)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Update the method constraints_level to match the signature updates for these methods in EnergyModelsBase. This includes renaming constraints_level to constraints_level_sp.\nMoved the function to EMB.constraints_level_sp to avoid problems.","category":"page"},{"location":"manual/NEWS/#Version-0.5.0-(2023-12-18)","page":"Release notes","title":"Version 0.5.0 (2023-12-18)","text":"","category":"section"},{"location":"manual/NEWS/#Adjustment-to-release-in-EMB-0.6.0","page":"Release notes","title":"Adjustment to release in EMB 0.6.0","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjusted the code for the new release.\nImplementation of support for RepresentativePeriods for HydroStorage nodes.","category":"page"},{"location":"manual/NEWS/#Version-0.4.2-(2023-09-01)","page":"Release notes","title":"Version 0.4.2 (2023-09-01)","text":"","category":"section"},{"location":"manual/NEWS/#Create-a-variable-:spill-for-hydro-storage-node","page":"Release notes","title":"Create a variable :spill for hydro storage node","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"This variable enables hydro storage nodes to spill water from the reservoir without producing energy.","category":"page"},{"location":"manual/NEWS/#Version-0.4.1-(2023-08-31)","page":"Release notes","title":"Version 0.4.1 (2023-08-31)","text":"","category":"section"},{"location":"manual/NEWS/#Split-the-hydro-storage-node-into-to-separate-nodes","page":"Release notes","title":"Split the hydro storage node into to separate nodes","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Split RegHydroStor into to types PumpedHydroStor and HydroStor. Both are subtypes","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"of the new abstract type HydroStorage <: EMB.Storage.","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Fix: variational OPEX for HydroStor now depends on flow_out instead of","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"flow_in. The new type PumpedHydroStor has a separate parameter for variational OPEX  for the pumps, which depends on flow_in.","category":"page"},{"location":"manual/NEWS/#Version-0.4.0-(2023-06-06)","page":"Release notes","title":"Version 0.4.0 (2023-06-06)","text":"","category":"section"},{"location":"manual/NEWS/#Switch-to-TimeStruct","page":"Release notes","title":"Switch to TimeStruct","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Switched the time structure representation to TimeStruct.\nTimeStruct is implemented with only the basis features that were available in TimeStructures. This implies that neither operational nor strategic uncertainty is included in the model.","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Version 0.3.0 (2023-05-30)","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjustment to changes in EnergyModelsBase v0.4.0 related to extra input data.","category":"page"},{"location":"manual/NEWS/#Version-0.2.2-(2023-05-15)","page":"Release notes","title":"Version 0.2.2 (2023-05-15)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjustment to changes in EnergyModelsBase v 0.3.3 related to the calls for the constraint functions.","category":"page"},{"location":"manual/NEWS/#Version-0.2.1-(2023-02-03)","page":"Release notes","title":"Version 0.2.1 (2023-02-03)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Take the examples out to the folder examples.","category":"page"},{"location":"manual/NEWS/#Version-0.2.0-(2023-02-03)","page":"Release notes","title":"Version 0.2.0 (2023-02-03)","text":"","category":"section"},{"location":"manual/NEWS/#Adjustmends-to-updates-in-EnergyModelsBase","page":"Release notes","title":"Adjustmends to updates in EnergyModelsBase","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjustment to version 0.3.0, namely:","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Changed type (Node) calls in tests to be consistent with version 0.3.0.\nRemoval of the type GlobalData and replacement with fields in the type OperationalModel in all tests.\nChanged type structure to be consistent with EMB version 0.3.0.\nSubstitution of certain constraints in create_node through functions which utilize dispatching on node types.\nChanged the input to the function variables_node.","category":"page"},{"location":"manual/NEWS/#Version-0.1.3-(2022-12-12)","page":"Release notes","title":"Version 0.1.3 (2022-12-12)","text":"","category":"section"},{"location":"manual/NEWS/#Internal-release","page":"Release notes","title":"Internal release","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Renamed to follow common prefix naming scheme.\nUpdate README.","category":"page"},{"location":"manual/NEWS/#Version-0.1.2-(2022-12-02)","page":"Release notes","title":"Version 0.1.2 (2022-12-02)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Minor test fixes in preparation of internal release.","category":"page"},{"location":"manual/NEWS/#Version-0.1.1-(2021-09-07)","page":"Release notes","title":"Version 0.1.1 (2021-09-07)","text":"","category":"section"},{"location":"manual/NEWS/#Changes-in-naming","page":"Release notes","title":"Changes in naming","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Major changes in both variable and parameter naming, check the commit message for an overview.\nChange of structure in composite type \"RegHydroStor\".","category":"page"},{"location":"manual/NEWS/#Version-0.1.0-(2021-08-23)","page":"Release notes","title":"Version 0.1.0 (2021-08-23)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Initial version with inclusion of nodes for:\nnondispatchable renewable energy sources (NonDisRES) and\nregulated hydro generation (RegHydroStor, can be used for pumped hydro storage).","category":"page"},{"location":"#EnergyModelsRenewableProducers","page":"Home","title":"EnergyModelsRenewableProducers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"EnergyModelsRenewableProducers","category":"page"},{"location":"#EnergyModelsRenewableProducers","page":"Home","title":"EnergyModelsRenewableProducers","text":"Main module for EnergyModelsRenewableProducers.jl.\n\nThis module implements the following types (Nodes) with constraints:\n\nNonDisRes is a subtype of Source and represents a non-dispatchable renewable producer, as wind, solar etc.\nPumpedHydroStor is a subtype of Storage and represents a regulated pumped hydro storage.\nHydroStor is a subtype of Storage and represents a regulated hydro storage, that is a standard hydro powerplant without pumps.\n\n\n\n\n\n","category":"module"},{"location":"","page":"Home","title":"Home","text":"This Julia package implements two main nodes with corresponding JuMP constraints, extending the package EnergyModelsBase with more detailed representation of renewable energy sources.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The first node, NonDisRES, models a non-dispatchable renewable energy source, like wind power, solar power, or run of river hydropower. These all use intermittent energy sources in the production of energy, so the maximum production capacity varies with the availability of the energy source at the time.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The other node implements a regulated hydropower storage plant, both with (PumpedHydroStor) and without pumps (HydroStor) for filling the reservoir with excess energy. The hydropower storage plant can also be extended as they are declared as subtypes of HydroStorage.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The new introduced node types are also documented in the public library.","category":"page"},{"location":"#Manual-outline","page":"Home","title":"Manual outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"manual/quick-start.md\",\n    \"manual/optimization-variables.md\",\n    \"manual/constraint-functions.md\",\n    \"manual/simple-example.md\"\n]\nDepth = 1","category":"page"},{"location":"#How-to-guides","page":"Home","title":"How to guides","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"how-to/contribute.md\",\n    \"how-to/update-models.md\",\n]\nDepth = 1","category":"page"},{"location":"#Library-outline","page":"Home","title":"Library outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"library/public.md\"\n    \"library/internals.md\"\n]\nDepth = 1","category":"page"},{"location":"library/public/#sec_lib_public","page":"Public","title":"Public interface","text":"","category":"section"},{"location":"library/public/#NonDisRES_public","page":"Public","title":"NonDisRES (non-dispatchable renewable energy source)","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"This type models both wind power, solar power, and run of river hydropower. These have in common that they generate power from an intermittent energy source, so they can have large variations in power output, based on the availability of the renewable source at the time. These power sources can be modelled using the same type NonDisRES. The new type is a subtype of EMB.Source. The new type only differs from its supertype through the field profile.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"The field profile::TimeProfile is a dimensionless ratio (between 0 and 1) describing how much of the installed capacity is utilized at the current operational period. Therefore, when using NonDisRES to model some renewable source, the data provided to this field is what defines the intermittent characteristics of the source.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"The NonDisRES node is modelled very similar to a regular EMB.Source} node. The only difference is how the intermittent nature of the non-dispatchable source is handled. The maximum power generation of the source in the operational period t depends on the time-dependent Profile variable.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"note: Note\nIf not needed, the production does not need to run at full capacity. The amount of energy not produced is computed using the non-negative optimization variable textttcurtailment (declared for NonDisRES nodes only).","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"The fields of the different types are listed below:","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"NonDisRES","category":"page"},{"location":"library/public/#EnergyModelsRenewableProducers.NonDisRES","page":"Public","title":"EnergyModelsRenewableProducers.NonDisRES","text":"NonDisRES <: EMB.Source\n\nA non-dispatchable renewable energy source. It extends the existing RefSource node through including a profile that corresponds to thr production. The profile can have variations on the strategic level.\n\nFields\n\nid is the name/identifyer of the node.\ncap::TimeProfile is the installed capacity.\nprofile::TimeProfile is the power production in each operational period as a ratio of the installed capacity at that time.\nopex_var::TimeProfile is the variable operating expense per energy unit produced.\nopex_fixed::TimeProfile is the fixed operating expense.\noutput::Dict{Resource, Real} are the generated Resources, normally Power.\ndata::Vector{Data} is the additional data (e.g. for investments). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#HydroStorage_public","page":"Public","title":"HydroStorage (regulated hydro storage with or without pump)","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"A hydropower plant is much more flexible than, e.g., a wind farm since the water can be stored for later use. Energy can be produced (almost) whenever it is needed. Some hydropower plants also have pumps installed. These are used to pump water into the reservoir when excess and cheap energy is available in the network. EnergyModelsRenewableProducers introduces hence two different types representing a regulated hydropower plant (HydroStor) and a pumped regulated hydropower plant (PumpedHydroStor) without a lower reservoir. Both types have a level and discharge capacity while a PumpedHydroStor also includes a charge capacity.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"The variable level_init represents the initial energy available in the reservoir in the beginning of each investment period. The variable level_inflow describes the inflow into the reservoir (measured in energy units), while level_min is the allowed minimum storage level in the dam, given as a ratio of the installed storage capacity of the reservoir at every operational period. The required minimum level is enforced by NVE and varies over the year. The resources stored in the hydro storage is set as stor_res, similar to a regular EMB.RefStorage.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"The five last parameters are used in the same way as in EMB.Storage. In the implementation of PumpedHydroStor, the values set in input represents a loss of energy when using the pumps. A value of 1 means no energy loss, while a value of 0 represents 100% energy loss of that inflow variable.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"The fields of the different types are listed below:","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"HydroStorage\nHydroStor\nPumpedHydroStor","category":"page"},{"location":"library/public/#EnergyModelsRenewableProducers.HydroStorage","page":"Public","title":"EnergyModelsRenewableProducers.HydroStorage","text":"An abstract type for hydro storage nodes, with or without pumping. \n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsRenewableProducers.HydroStor","page":"Public","title":"EnergyModelsRenewableProducers.HydroStor","text":"HydroStor{T} <: HydroStorage{T}\n\nA regulated hydropower storage, modelled as a Storage node. A regulated hydro storage node requires a capacity for the discharge and does not have a required inflow from the model, except for water inflow from outside the model, although it requires a field input.\n\nFields\n\nid is the name/identifyer of the node.\nlevel::EMB.UnionCapacity are the level parameters of the HydroStor node. Depending on the chosen type, the charge parameters can include variable OPEX and/or fixed OPEX.\ndischarge::EMB.UnionCapacity are the discharging parameters of the HydroStor node. Depending on the chosen type, the discharge parameters can include variable OPEX, fixed OPEX, and/or a capacity.\nlevel_init::TimeProfile is the initial stored energy in the dam.\nlevel_inflow::TimeProfile is the inflow of power per operational period.\nlevel_min::TimeProfile is the minimum fraction of the reservoir capacity that has to remain in the HydroStorage node.\nstor_res::ResourceCarrier is the stored Resource.\ninput::Dict{Resource, Real} are the input Resources. In the case of a HydroStor, this field can be left out.\noutput::Dict{Resource, Real} can only contain one entry, the stored resource.\ndata::Vector{Data} additional data (e.g. for investments). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsRenewableProducers.PumpedHydroStor","page":"Public","title":"EnergyModelsRenewableProducers.PumpedHydroStor","text":"PumpedHydroStor{T} <: HydroStorage{T}\n\nA pumped hydropower storage, modelled as a Storage node. A pumped hydro storage node allows for storing energy through pumping water into the reservoir. The current implementation is a simplified node in which no lower reservoir is required. Instead, it is assumed that the reservoir has an infinite size.\n\nA pumped hydro storage node requires a capacity for both charge and discharge to account for the potential to store energy in the form of potential energy.\n\nFields\n\nid is the name/identifyer of the node.\ncharge::EMB.UnionCapacity are the charging parameters of the PumpedHydroStor node. Depending on the chosen type, the charge parameters can include variable OPEX, fixed OPEX, and/or a capacity.\nlevel::EMB.UnionCapacity are the level parameters of the HydroStor node. Depending on the chosen type, the charge parameters can include variable OPEX and/or fixed OPEX.\ndischarge::EMB.UnionCapacity are the discharging parameters of the HydroStor node. Depending on the chosen type, the discharge parameters can include variable OPEX, fixed OPEX, and/or a capacity.\nlevel_init::TimeProfile is the initial stored energy in the dam.\nlevel_inflow::TimeProfile is the inflow of power per operational period.\nlevel_min::TimeProfile is the minimum fraction of the reservoir capacity that has to remain in the HydroStorage node.\nstor_res::ResourceCarrier is the stored Resource.\ninput::Dict{Resource, Real} are the input Resources.\noutput::Dict{Resource, Real} can only contain one entry, the stored resource.\ndata::Vector{Data} additional data (e.g. for investments). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/","page":"Public","title":"Public","text":"In recent version increases, we changed the individual fields of the HydroStorage nodes as well as their types. Hence, we still incorporate legacy constructors that can be utilized when having a model in previous versions. However, we removed one legacy constructor as it is no longer required. Calling the constructor will provide you now with an error.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"This legacy constructor is:","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"RegHydroStor","category":"page"},{"location":"library/public/#EnergyModelsRenewableProducers.RegHydroStor","page":"Public","title":"EnergyModelsRenewableProducers.RegHydroStor","text":"RegHydroStor(\n    id::Any,\n    rate_cap::TimeProfile,\n    stor_cap::TimeProfile,\n    has_pump::Bool,\n    level_init::TimeProfile,\n    level_inflow::TimeProfile,\n    level_min::TimeProfile,\n    opex_var::TimeProfile,\n    opex_fixed::TimeProfile,\n    stor_res::ResourceCarrier,\n    input,\n    output,\n    Data,\n)\n\nOriginal Legacy constructor for a regulated hydropower storage, with or without pumping capabilities. This version is discontinued starting with Version 0.6.0. resulting in an error It is replaced with the two new types HydroStor and PumpedHydroStor to utilize the concept of multiple dispatch instead of logic.\n\nSee the documentation for further information regarding how you can translate your existing model to the new model.\n\nFields\n\nid is the name/identifyer of the node.\nrate_cap::TimeProfile is the installed installed rate capacity.\nstor_cap::TimeProfile is the installed storage capacity in the dam.\nhas_pump::Bool states wheter the stored resource can flow in.\nlevel_init::TimeProfile is the initial stored energy in the dam.\nlevel_inflow::TimeProfile is the inflow of power per operational period.\nlevel_min::TimeProfile is the minimum fraction of the reservoir capacity that has to remain in the HydroStorage node.\nopex_var::TimeProfile are the variable operational expenses per GWh produced.\nopex_fixed::TimeProfile are the fixed operational costs of the storage caacity.\nstor_res::ResourceCarrier is the stored Resource.\ninput::Dict{Resource, Real} are the stored and used resources. The values in the Dict are ratios describing the energy loss when using the pumps.\noutput::Dict{Resource, Real} can only contain one entry, the stored resource.\ndata::Array{Data} additional data (e.g. for investments). This value is conditional through the application of a constructor.\n\n\n\n\n\n","category":"function"},{"location":"library/public/","page":"Public","title":"Public","text":"See the section on how to update models for further information regarding how you can translate your existing model to the new model.","category":"page"},{"location":"manual/constraint-functions/#constraint_functions","page":"Constraint functions","title":"Constraint functions","text":"","category":"section"},{"location":"manual/constraint-functions/#NonDisRES-(non-dispatchable-renewable-energy-source)","page":"Constraint functions","title":"NonDisRES (non-dispatchable renewable energy source)","text":"","category":"section"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"The introduction of the type NonDisRES does not require a new create_node function. Instead, it is sufficient to dispatch on the function","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"EMB.constraints_capacity(m, n::NonDisRES, 𝒯::TimeStructure, modeltype::EnergyModel)","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"to introduce the new energy balance using the field profile and the variable textttcurtailment. In this case, we also have to call the function","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"constraints_capacity_installed(m, n, 𝒯, modeltype)","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"to allow for investments when coupled with EnergyModelsInvestments. We do however not need to create new methods for said function.","category":"page"},{"location":"manual/constraint-functions/#HydroStorage-(regulated-hydro-storage-with-or-without-pump)","page":"Constraint functions","title":"HydroStorage (regulated hydro storage with or without pump)","text":"","category":"section"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"The HydroStorage types utilize the same create_node function for introducing new concepts. In addition, they dispatch on individual functions from within EnergyModelsBase to extend the functionality.","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"The functions","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"EMB.constraints_flow_in(m, n::HydroStor, 𝒯::TimeStructure, modeltype::EnergyModel)\nEMB.constraints_flow_in(m, n::PumpedHydroStor, 𝒯::TimeStructure, modeltype::EnergyModel)","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"allow for a different behavior of the HydroStorage node through fixing the variable textttflow_in in the case of a HydroStor node to 0 and limiting it in the case of a PumpedHydroStor to installed charge capacity through the variable textttstor_charge_use.","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"All HydroStorage subtypes utilize the introduced level balances from EnergyModelsBase. MOdification to the level balance is achieved through overloading","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"EMB.constraints_level_aux(m, n::HydroStorage, 𝒯, 𝒫, modeltype::EnergyModel)","category":"page"},{"location":"manual/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"to account for both the provision of an initial level at the start of each strategic period as well as modifying the constraint for the variable textttstor_level_Deltatexttt_op to account for the introduction of the new variable texttthydro_spill. The former is required for HydroStorage subtypes as the initial level is frequently a function of the season (excluding small scale pumped hydro storage) while the latter is required to include spillage.","category":"page"}]
}
